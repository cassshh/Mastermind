!function(){"use strict";var b=String.raw;const c=document.createElement("template");c.innerHTML=b`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      width: 100%;
      flex: 1;
      max-height: 100%;
      background: var(--accent-color, #ed1a59);
      color: var(--primary-color, #212121);
      font-size: 2.75em;
      align-items: center;
      justify-content: center;
      border-radius: 0 0 15px 15px;
      transition: max-height 1s ease, font-size .7s ease-in-out .3s;
    }
  </style>
  <slot></slot>
`,window.customElements.define("mm-toolbar",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(c,"mm-toolbar"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(c.content.cloneNode(!0))}});const d=document.createElement("template");d.innerHTML=b`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    .play {
      color: var(--accent-color, #ed1a59);
      font-size: 2.5em;
      padding: 1em;
      cursor: pointer;
      border: 1px var(--accent-color, #ed1a59) solid;
      border-radius: 15px;
      transition: all .5s ease;
    }

    .hide { 
      opacity: 0;
    }

    .play:hover {
      color: var(--primary-color, #212121);
      background-color: var(--accent-color, #ed1a59);
    }

  </style>
  <span id="playButton" class="play">Play</span>
`,window.customElements.define("mm-play",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(d,"mm-play"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(d.content.cloneNode(!0)),this.play=a.querySelector("#playButton")}setPlayListener(a){this.play.addEventListener("click",a)}hide(){this.play.classList.add("hide")}});const e=document.createElement("template");e.innerHTML=b`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
    }

    .container {
      flex: 1;
      background: coral;
      margin: 2px;
    }

  </style>
  <div class="container"></div>
  <div class="container"></div>
  <div class="container"></div>
  <div class="container"></div>
  <div class="container"></div>
`,window.customElements.define("mm-board-row",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(e,"mm-board-row"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(e.content.cloneNode(!0))}});const f=document.createElement("template");f.innerHTML=b`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    mm-board-row {
      display: flex;
      flex: 1;
      width: 100%;
      max-width: 600px;
    }
  </style>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
`,window.customElements.define("mm-board",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(f,"mm-board"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(f.content.cloneNode(!0))}});const a=document.createElement("template");a.innerHTML=b`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex: 1;
    }

    mm-toolbar.toolbar {
      max-height: 64px;
      font-size: 1.75em;
    }
    
  </style>
  <mm-toolbar>Mastermind</mm-toolbar>
  <mm-play></mm-play>
  <!-- <mm-board></mm-board> -->
`,window.customElements.define("mm-app",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(a,"mm-app"),ShadyCSS.styleElement(this));let b=this.attachShadow({mode:"open"});b.appendChild(a.content.cloneNode(!0)),this.toolbar=b.querySelector("mm-toolbar"),this.play=b.querySelector("mm-play"),this.play.setPlayListener(()=>{this.toolbar.classList.add("toolbar"),setTimeout(()=>this.play.hide(),500)})}});const g=new class{constructor({solution:a,tries:b=12}){this.solution=a,this.tries=b,this.calc=this.calc,this.try=this.try}try({guess:a=[]}){return Object.assign(this.guess({guess:a}),{tries:--this.tries})}guess({guess:a=[]}){if(a.length!==this.solution.length)return;const b={hits:0,pseudoHits:0},c=this.solution.slice(),d=Array(this.solution.length).fill(0);return a.forEach((f,e)=>{f===this.solution[e]?(b.hits+=1,c[e]=-1):d[f]++}),d.forEach((a,c)=>{0<a&&this.solution.includes(c)&&b.pseudoHits++}),b}}({solution:[3,2,2,0]});console.log(g.try({guess:[2,1,1,0]}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2h0bWwubWpzIiwiLi4vLi4vc3JjL21tLXRvb2xiYXIubWpzIiwiLi4vLi4vc3JjL21tLXBsYXkubWpzIiwiLi4vLi4vc3JjL21tLWJvYXJkLXJvdy5tanMiLCIuLi8uLi9zcmMvbW0tYm9hcmQubWpzIiwiLi4vLi4vc3JjL21tLWFwcC5tanMiLCIuLi8uLi9zcmMvYXBwLm1qcyIsIi4uLy4uL3NyYy9tYXN0ZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEhhY2sgdG8gZ2V0IGh0bWwgc3ludGF4IGhpZ2hsaWdodGluZyB3aXRoaW4gdGVtcGxhdGUgbGl0ZXJhbHNcbmV4cG9ydCBkZWZhdWx0IFN0cmluZy5yYXc7XG4iLCJpbXBvcnQgaHRtbCBmcm9tICcuL2h0bWwubWpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBmbGV4OiAxO1xuICAgICAgbWF4LWhlaWdodDogMTAwJTtcbiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWFjY2VudC1jb2xvciwgI2VkMWE1OSk7XG4gICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvciwgIzIxMjEyMSk7XG4gICAgICBmb250LXNpemU6IDIuNzVlbTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDAgMCAxNXB4IDE1cHg7XG4gICAgICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDFzIGVhc2UsIGZvbnQtc2l6ZSAuN3MgZWFzZS1pbi1vdXQgLjNzO1xuICAgIH1cbiAgPC9zdHlsZT5cbiAgPHNsb3Q+PC9zbG90PlxuYDtcblxuY2xhc3MgTW1Ub29sYmFyIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tdG9vbGJhcicpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICAgIC8vIEF0dGFjaCBhIHNoYWRvdyByb290IHRvIHRoZSBlbGVtZW50LlxuICAgIGxldCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0bXBsLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW0tdG9vbGJhcicsIE1tVG9vbGJhcik7XG4iLCJpbXBvcnQgaHRtbCBmcm9tICcuL2h0bWwubWpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnBsYXkge1xuICAgICAgY29sb3I6IHZhcigtLWFjY2VudC1jb2xvciwgI2VkMWE1OSk7XG4gICAgICBmb250LXNpemU6IDIuNWVtO1xuICAgICAgcGFkZGluZzogMWVtO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYm9yZGVyOiAxcHggdmFyKC0tYWNjZW50LWNvbG9yLCAjZWQxYTU5KSBzb2xpZDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgLjVzIGVhc2U7XG4gICAgfVxuXG4gICAgLmhpZGUgeyBcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgfVxuXG4gICAgLnBsYXk6aG92ZXIge1xuICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IsICMyMTIxMjEpO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjZWQxYTU5KTtcbiAgICB9XG5cbiAgPC9zdHlsZT5cbiAgPHNwYW4gaWQ9XCJwbGF5QnV0dG9uXCIgY2xhc3M9XCJwbGF5XCI+UGxheTwvc3Bhbj5cbmA7XG5cbmNsYXNzIE1tUGxheSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAodHlwZW9mIFNoYWR5Q1NTICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGUodG1wbCwgJ21tLXBsYXknKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgU2hhZHlDU1Muc3R5bGVFbGVtZW50KHRoaXMpO1xuICAgIH1cbiAgICAvLyBBdHRhY2ggYSBzaGFkb3cgcm9vdCB0byB0aGUgZWxlbWVudC5cbiAgICBsZXQgc2hhZG93Um9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIHNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodG1wbC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG5cbiAgICB0aGlzLnBsYXkgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5QnV0dG9uJyk7XG4gIH1cblxuICBzZXRQbGF5TGlzdGVuZXIoYykge1xuICAgIHRoaXMucGxheS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGMpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLnBsYXkuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS1wbGF5JywgTW1QbGF5KTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuXG4gICAgLmNvbnRhaW5lciB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgYmFja2dyb3VuZDogY29yYWw7XG4gICAgICBtYXJnaW46IDJweDtcbiAgICB9XG5cbiAgPC9zdHlsZT5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj48L2Rpdj5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+PC9kaXY+XG5gO1xuXG5jbGFzcyBNbUJvYXJkUm93IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tYm9hcmQtcm93Jyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS1ib2FyZC1yb3cnLCBNbUJvYXJkUm93KTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuaW1wb3J0ICcuL21tLWJvYXJkLXJvdy5tanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZmxleDogMTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG5cbiAgICBtbS1ib2FyZC1yb3cge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXg6IDE7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1heC13aWR0aDogNjAwcHg7XG4gICAgfVxuICA8L3N0eWxlPlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuICA8bW0tYm9hcmQtcm93PjwvbW0tYm9hcmQtcm93PlxuYDtcblxuY2xhc3MgTW1Cb2FyZCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAodHlwZW9mIFNoYWR5Q1NTICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5wcmVwYXJlVGVtcGxhdGUodG1wbCwgJ21tLWJvYXJkJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS1ib2FyZCcsIE1tQm9hcmQpO1xuIiwiaW1wb3J0IGh0bWwgZnJvbSAnLi9odG1sLm1qcyc7XG5pbXBvcnQgJy4vbW0tdG9vbGJhci5tanMnO1xuaW1wb3J0ICcuL21tLXBsYXkubWpzJztcbmltcG9ydCAnLi9tbS1ib2FyZC5tanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4OiAxO1xuICAgIH1cblxuICAgIG1tLXRvb2xiYXIudG9vbGJhciB7XG4gICAgICBtYXgtaGVpZ2h0OiA2NHB4O1xuICAgICAgZm9udC1zaXplOiAxLjc1ZW07XG4gICAgfVxuICAgIFxuICA8L3N0eWxlPlxuICA8bW0tdG9vbGJhcj5NYXN0ZXJtaW5kPC9tbS10b29sYmFyPlxuICA8bW0tcGxheT48L21tLXBsYXk+XG4gIDwhLS0gPG1tLWJvYXJkPjwvbW0tYm9hcmQ+IC0tPlxuYDtcblxuY2xhc3MgTW1BcHAgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiBTaGFkeUNTUyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlKHRtcGwsICdtbS1hcHAnKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgU2hhZHlDU1Muc3R5bGVFbGVtZW50KHRoaXMpO1xuICAgIH1cbiAgICAvLyBBdHRhY2ggYSBzaGFkb3cgcm9vdCB0byB0aGUgZWxlbWVudC5cbiAgICBsZXQgc2hhZG93Um9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgIHNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQodG1wbC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG5cbiAgICB0aGlzLnRvb2xiYXIgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ21tLXRvb2xiYXInKTtcbiAgICB0aGlzLnBsYXkgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ21tLXBsYXknKTtcbiAgICB0aGlzLnBsYXkuc2V0UGxheUxpc3RlbmVyKCgpID0+IHtcbiAgICAgIHRoaXMudG9vbGJhci5jbGFzc0xpc3QuYWRkKCd0b29sYmFyJyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucGxheS5oaWRlKCksIDUwMCk7XG4gICAgfSk7XG4gIH1cbn1cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ21tLWFwcCcsIE1tQXBwKTtcbiIsImltcG9ydCAnLi9tbS1hcHAubWpzJztcbmltcG9ydCBNYXN0ZXIgZnJvbSAnLi9tYXN0ZXIubWpzJztcblxuLy8gaGl0ICB8IHBzZXVkb1xuY29uc3QgYzEgPSBbMywgMiwgMiwgMF07XG5jb25zdCBjMiA9IFsyLCAxLCAxLCAwXTtcbi8vIDEgIHwgMVxuXG5jb25zdCBtYXN0ZXIgPSBuZXcgTWFzdGVyKHsgc29sdXRpb246IGMxIH0pO1xuLy8gY29uc29sZS5sb2cobWFzdGVyLmd1ZXNzKHsgZ3Vlc3M6IGMyIH0pKTtcbmNvbnNvbGUubG9nKG1hc3Rlci50cnkoeyBndWVzczogYzIgfSkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFzdGVyIHtcbiAgY29uc3RydWN0b3IoeyBzb2x1dGlvbiwgdHJpZXMgPSAxMiB9KSB7XG4gICAgdGhpcy5zb2x1dGlvbiA9IHNvbHV0aW9uO1xuICAgIHRoaXMudHJpZXMgPSB0cmllcztcbiAgICB0aGlzLmNhbGMgPSB0aGlzLmNhbGM7XG4gICAgdGhpcy50cnkgPSB0aGlzLnRyeTtcbiAgfVxuXG4gIHRyeSh7IGd1ZXNzID0gW10gfSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuZ3Vlc3MoeyBndWVzcyB9KSwgeyB0cmllczogLS10aGlzLnRyaWVzIH0pO1xuICB9XG5cbiAgZ3Vlc3MoeyBndWVzcyA9IFtdIH0pIHtcbiAgICBpZiAoZ3Vlc3MubGVuZ3RoICE9PSB0aGlzLnNvbHV0aW9uLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgb2JqID0geyBoaXRzOiAwLCBwc2V1ZG9IaXRzOiAwIH07XG4gICAgY29uc3Qgc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uLnNsaWNlKCk7IC8vIENvcHlcbiAgICBjb25zdCBmcmVxID0gbmV3IEFycmF5KHRoaXMuc29sdXRpb24ubGVuZ3RoKS5maWxsKDApO1xuXG4gICAgZ3Vlc3MuZm9yRWFjaCgodiwgaSkgPT4ge1xuICAgICAgaWYgKHYgPT09IHRoaXMuc29sdXRpb25baV0pIHtcbiAgICAgICAgb2JqLmhpdHMgKz0gMTtcbiAgICAgICAgc29sdXRpb25baV0gPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyZXFbdl0rKztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZyZXEuZm9yRWFjaCgodiwgaSkgPT4ge1xuICAgICAgaWYgKHYgPiAwICYmIHRoaXMuc29sdXRpb24uaW5jbHVkZXMoaSkpIG9iai5wc2V1ZG9IaXRzKys7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG4iXSwibmFtZXMiOlsiU3RyaW5nIiwicmF3IiwidG1wbCIsImlubmVySFRNTCIsImh0bWwiLCJ3aW5kb3ciLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsIkhUTUxFbGVtZW50IiwiU2hhZHlDU1MiLCJwcmVwYXJlVGVtcGxhdGUiLCJzdHlsZUVsZW1lbnQiLCJ0aGlzIiwiYXR0YWNoU2hhZG93IiwibW9kZSIsImFwcGVuZENoaWxkIiwiY29udGVudCIsImNsb25lTm9kZSIsInNoYWRvd1Jvb3QiLCJwbGF5IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0b29sYmFyIiwic2V0UGxheUxpc3RlbmVyIiwiaGlkZSIsIm1hc3RlciIsInNvbHV0aW9uIiwidHJpZXMiLCJjYWxjIiwidHJ5IiwiZ3Vlc3MiLCJPYmplY3QiLCJhc3NpZ24iLCJsZW5ndGgiLCJvYmoiLCJoaXRzIiwicHNldWRvSGl0cyIsInNsaWNlIiwiZnJlcSIsIkFycmF5IiwiZmlsbCIsImZvckVhY2giLCJ2IiwiaW5jbHVkZXMiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiK0JBQ2VBLE9BQU9DLG1DQ0NjLFlBQ3BDQyxFQUFLQyxTQUFMRCxDQUFpQkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXFDakJDLE9BQU9DLGNBQVBELENBQXNCRSxNQUF0QkYsQ0FBNkIsWUFBN0JBLGNBZHdCRyxtQ0FHSSxtQkFBYkMsU0FBYSxZQUViQyxrQkFBc0IsdUJBRXRCQyxhQUFhQyxLQUpBLEVBT1BBLEtBQUtDLFlBQUxELEVBQW9CRSxLQUFNLE9BQTFCRixFQUNORyxXQURNSCxDQUNNVixFQUFLYyxPQUFMZCxDQUFhZSxTQUFiZixFQUF1QixDQUF2QkEsQ0FETlUsR0FJckJQLCtDQ3JDS0YsVUFBWUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBNkRqQkMsT0FBT0Ms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
