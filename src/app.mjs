!function(){"use strict";function j(a){return parseFloat(a)||0}function f(a){for(var b=[],c=arguments.length-1;0<c--;)b[c]=arguments[c+1];return b.reduce(function(b,c){return b+j(a["border-"+c+"-width"])},0)}function c(b){var e=Math.abs,g=Math.round,h=b.clientWidth,k=b.clientHeight;if(!h&&!k)return u;var p=m(b).getComputedStyle(b),i=function(a){for(var b={},c=0,d=["top","right","bottom","left"];c<d.length;c+=1){var e=d[c],f=a["padding-"+e];b[e]=j(f)}return b}(p),o=i.left+i.right,r=i.top+i.bottom,s=j(p.width),a=j(p.height);if("border-box"===p.boxSizing&&(g(s+o)!==h&&(s-=f(p,"left","right")+o),g(a+r)!==k&&(a-=f(p,"top","bottom")+r)),!function(a){return a===m(a).document.documentElement}(b)){var c=g(s+o)-h,l=g(a+r)-k;1!==e(c)&&(s-=c),1!==e(l)&&(a-=l)}return q(i.left,i.top,s,a)}function b(a){return o?p(a)?function(a){var b=a.getBBox();return q(0,0,b.width,b.height)}(a):c(a):u}function q(a,b,c,d){return{x:a,y:b,width:c,height:d}}var w=String.raw;const e=document.createElement("template");e.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      width: 100%;
      flex: 1;
      max-height: 100%;
      background: var(--accent-color, #ed1a59);
      color: var(--primary-color, #212121);
      font-size: 2.75em;
      align-items: center;
      justify-content: center;
      border-radius: 0 0 15px 15px;
      transition: max-height 1s ease, font-size .7s ease-in-out .3s;
    }
  </style>
  <slot></slot>
`,window.customElements.define("mm-toolbar",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(e,"mm-toolbar"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(e.content.cloneNode(!0))}});const t=document.createElement("template");t.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    .play {
      color: var(--accent-color, #ed1a59);
      font-size: 2.5em;
      padding: 1em;
      cursor: pointer;
      border: 1px var(--accent-color, #ed1a59) solid;
      border-radius: 15px;
      transition: all .5s ease;
    }

    .hide { 
      opacity: 0;
    }

    .play:hover {
      color: var(--primary-color, #212121);
      background-color: var(--accent-color, #ed1a59);
    }

  </style>
  <span id="playButton" class="play">Play</span>
`,window.customElements.define("mm-play",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(t,"mm-play"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(t.content.cloneNode(!0)),this.play=a.querySelector("#playButton")}setPlayListener(a){this.play.addEventListener("click",a)}hide(){this.play.classList.add("hide")}});const n=document.createElement("template");n.innerHTML=w`
  <style>
    :host {
      background: #343434;
      border-radius: 50%;
      transition: background .3s ease-in-out;
    }
  </style>
`,window.customElements.define("mm-circle",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(n,"mm-circle"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(n.content.cloneNode(!0))}size(a,b,c){const d=`${a>b?b-c:a-c}px`;this.style.width=d,this.style.height=d}color(a){this.style.background=a}});var i=function(){function a(a,b){var c=-1;return a.some(function(a,d){return a[0]===b&&(c=d,!0)}),c}return"undefined"==typeof Map?function(){function b(){this.__entries__=[]}var c={size:{configurable:!0}};return c.size.get=function(){return this.__entries__.length},b.prototype.get=function(b){var c=a(this.__entries__,b),d=this.__entries__[c];return d&&d[1]},b.prototype.set=function(b,c){var d=a(this.__entries__,b);~d?this.__entries__[d][1]=c:this.__entries__.push([b,c])},b.prototype.delete=function(b){var c=this.__entries__,d=a(c,b);~d&&c.splice(d,1)},b.prototype.has=function(b){return!!~a(this.__entries__,b)},b.prototype.clear=function(){this.__entries__.splice(0)},b.prototype.forEach=function(a,b){void 0===b&&(b=null);for(var c,d=0,e=this.__entries__;d<e.length;d+=1)c=e[d],a.call(b,c[1],c[0])},Object.defineProperties(b.prototype,c),b}():Map}(),o="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,r="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),s="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(r):function(a){return setTimeout(function(){return a(Date.now())},1e3/60)},a=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,d=function(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(a,b){function c(){f&&(f=!1,a()),g&&e()}function d(){s(c)}function e(){var a=Date.now();if(f){if(a-h<2)return;g=!0}else f=!0,g=!1,setTimeout(d,b);h=a}var f=!1,g=!1,h=0;return e}(this.refresh.bind(this),20)};d.prototype.addObserver=function(a){~this.observers_.indexOf(a)||this.observers_.push(a),this.connected_||this.connect_()},d.prototype.removeObserver=function(a){var b=this.observers_,c=b.indexOf(a);~c&&b.splice(c,1),!b.length&&this.connected_&&this.disconnect_()},d.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},d.prototype.updateObservers_=function(){var a=this.observers_.filter(function(a){return a.gatherActive(),a.hasActive()});return a.forEach(function(a){return a.broadcastActive()}),0<a.length},d.prototype.connect_=function(){o&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},d.prototype.disconnect_=function(){o&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},d.prototype.onTransitionEnd_=function(b){var c=b.propertyName;void 0===c&&(c=""),a.some(function(a){return!!~c.indexOf(a)})&&this.refresh()},d.getInstance=function(){return this.instance_||(this.instance_=new d),this.instance_},d.instance_=null;var h=function(a,b){for(var c,d=0,e=Object.keys(b);d<e.length;d+=1)c=e[d],Object.defineProperty(a,c,{value:b[c],enumerable:!1,writable:!1,configurable:!0});return a},m=function(a){return a&&a.ownerDocument&&a.ownerDocument.defaultView||r},u=q(0,0,0,0),p="undefined"==typeof SVGGraphicsElement?function(a){return a instanceof m(a).SVGElement&&"function"==typeof a.getBBox}:function(a){return a instanceof m(a).SVGGraphicsElement},v=function(a){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=q(0,0,0,0),this.target=a};v.prototype.isActive=function(){var a=b(this.target);return this.contentRect_=a,a.width!==this.broadcastWidth||a.height!==this.broadcastHeight},v.prototype.broadcastRect=function(){var a=this.contentRect_;return this.broadcastWidth=a.width,this.broadcastHeight=a.height,a};var y=function(b,d){var f,g,j,k,m,n,a,c=(g=(f=d).x,j=f.y,k=f.width,m=f.height,n="undefined"==typeof DOMRectReadOnly?Object:DOMRectReadOnly,a=Object.create(n.prototype),h(a,{x:g,y:j,width:k,height:m,top:j,right:g+k,bottom:m+j,left:g}),a);h(this,{target:b,contentRect:c})},g=function(a,b,c){if(this.activeObservations_=[],this.observations_=new i,"function"!=typeof a)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=a,this.controller_=b,this.callbackCtx_=c};g.prototype.observe=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var b=this.observations_;b.has(a)||(b.set(a,new v(a)),this.controller_.addObserver(this),this.controller_.refresh())}},g.prototype.unobserve=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var b=this.observations_;b.has(a)&&(b.delete(a),b.size||this.controller_.removeObserver(this))}},g.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},g.prototype.gatherActive=function(){var a=this;this.clearActive(),this.observations_.forEach(function(b){b.isActive()&&a.activeObservations_.push(b)})},g.prototype.broadcastActive=function(){if(this.hasActive()){var a=this.callbackCtx_,b=this.activeObservations_.map(function(a){return new y(a.target,a.broadcastRect())});this.callback_.call(a,b,a),this.clearActive()}},g.prototype.clearActive=function(){this.activeObservations_.splice(0)},g.prototype.hasActive=function(){return 0<this.activeObservations_.length};var z="undefined"==typeof WeakMap?new i:new WeakMap,x=function(a){if(!(this instanceof x))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var b=d.getInstance(),c=new g(a,b,this);z.set(this,c)};["observe","unobserve","disconnect"].forEach(function(a){x.prototype[a]=function(){return(b=z.get(this))[a].apply(b,arguments);var b}});var B=void 0===r.ResizeObserver?x:r.ResizeObserver;const C=document.createElement("template");C.innerHTML=w`
  <style>
    :host {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      margin: 2px;
      transition: all .7s ease-in-out;
      justify-content: space-evenly;
    }

    .transition {
      transition: all .5s ease-in-out;
    }

    .hidden{
      height: 0 !important;
      width: 0 !important;
      opacity: 0;
    }

  </style>
  <mm-circle></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
`,window.customElements.define("mm-board-item",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(C,"mm-board-item"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(C.content.cloneNode(!0)),this.active=!1,this.circles=a.querySelectorAll("mm-circle"),this.circles.forEach((a)=>{a.classList.contains("hidden")||(a.active=!0)}),new B((a)=>{for(const b of a){const{width:a,height:c}=b.contentRect;this.circles.forEach((b)=>{b.size(a,c,5)})}}).observe(this)}setActive(a){return this.active=a,this.active}animate(){this.style.flex=this.active?10:1,this.active?this.showCircles():this.hideCircles()}showCircles(){this.showingCircles=!0,this.circles.forEach((a,b)=>{a.classList.add("transition"),setTimeout(()=>{a.classList.remove("hidden")},100*b)})}hideCircles(){this.showingCircles&&(this.circles.forEach((a,b)=>{a.active?a.classList.remove("transition"):(setTimeout(()=>{a.classList.add("hidden")},100*b),setTimeout(()=>{a.classList.remove("transition")},600*b))}),this.showingCircles=!1)}});const D=document.createElement("template");D.innerHTML=w`
  <style>
    :host {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex: 1;
      margin: 2px;
    }

    .keys-row {
      display: flex;
      width: 100%;
      align-items: center;
    }

    mm-circle {
      margin: 2px;
    }

  </style>
  <div class="keys-row">
    <mm-circle></mm-circle>
    <mm-circle></mm-circle>
  </div>
  <div class="keys-row">
    <mm-circle></mm-circle>
    <mm-circle></mm-circle>
  </div>
`,window.customElements.define("mm-board-result",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(D,"mm-board-result"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(D.content.cloneNode(!0)),this.circles=a.querySelectorAll("mm-circle"),new B((a)=>{for(const b of a){const{width:a,height:c}=b.contentRect;this.circles.forEach((b)=>{b.size(a/2,c/2,5)})}}).observe(this)}setResult({hits:a,pseudoHits:b}){this.circles.forEach((c)=>{0<a--?c.color("red"):0<b--&&c.color("white")})}});const E=document.createElement("template");E.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
    }

  </style>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-result></mm-board-result>
`,window.customElements.define("mm-board-row",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(E,"mm-board-row"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(E.content.cloneNode(!0)),this.items=a.querySelectorAll("mm-board-item"),this.items.forEach((a)=>a.addEventListener("click",this.onClick.bind(this)))}onClick(a){const b=a.target;if(b.active)return;let c=!1;this.items.forEach((a)=>{a.showingCircles&&(c=!0),a.setActive(!1),a.animate()}),b.setActive(!0),setTimeout(()=>{b.animate()},c?400:200)}});const F=document.createElement("template");F.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    mm-board-row {
      display: flex;
      flex: 1;
      width: 100%;
      max-width: 600px;
    }
  </style>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
`,window.customElements.define("mm-board",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(F,"mm-board"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(F.content.cloneNode(!0))}});const k=document.createElement("template");k.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex: 1;
    }

    mm-toolbar.toolbar {
      max-height: 64px;
      font-size: 1.75em;
    }
    
  </style>
  <mm-toolbar class="toolbar">Mastermind</mm-toolbar>
  <!-- <mm-play></mm-play> -->
  <mm-board></mm-board>
`,window.customElements.define("mm-app",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(k,"mm-app"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(k.content.cloneNode(!0)),this.toolbar=a.querySelector("mm-toolbar")}});const A=new class{constructor({solution:a,tries:b=12}){this.solution=a,this.tries=b,this.calc=this.calc,this.try=this.try}try({guess:a=[]}){return Object.assign(this.guess({guess:a}),{tries:--this.tries})}guess({guess:a=[]}){if(a.length!==this.solution.length)return;const b={hits:0,pseudoHits:0},c=this.solution.slice(),d=Array(this.solution.length).fill(0);return a.forEach((a,e)=>{a===this.solution[e]?(b.hits+=1,c[e]=-1):d[a]++}),d.forEach((a,c)=>{0<a&&this.solution.includes(c)&&b.pseudoHits++}),b}}({solution:[3,2,2,0]});console.log(A.try({guess:[2,1,1,0]}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzIiwiLi4vLi4vc3JjL2h0bWwubWpzIiwiLi4vLi4vc3JjL21tLXRvb2xiYXIubWpzIiwiLi4vLi4vc3JjL21tLXBsYXkubWpzIiwiLi4vLi4vc3JjL21tLWNpcmNsZS5tanMiLCIuLi8uLi9zcmMvbW0tYm9hcmQtaXRlbS5tanMiLCIuLi8uLi9zcmMvbW0tYm9hcmQtcmVzdWx0Lm1qcyIsIi4uLy4uL3NyYy9tbS1ib2FyZC1yb3cubWpzIiwiLi4vLi4vc3JjL21tLWJvYXJkLm1qcyIsIi4uLy4uL3NyYy9tbS1hcHAubWpzIiwiLi4vLi4vc3JjL2FwcC5tanMiLCIuLi8uLi9zcmMvbWFzdGVyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQSBjb2xsZWN0aW9uIG9mIHNoaW1zIHRoYXQgcHJvdmlkZSBtaW5pbWFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEVTNiBjb2xsZWN0aW9ucy5cclxuICpcclxuICogVGhlc2UgaW1wbGVtZW50YXRpb25zIGFyZSBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIHRoZSBSZXNpemVPYnNlcnZlclxyXG4gKiBtb2R1bGVzIGFzIHRoZXkgY292ZXIgb25seSBhIGxpbWl0ZWQgcmFuZ2Ugb2YgdXNlIGNhc2VzLlxyXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlcXVpcmUtanNkb2MsIHZhbGlkLWpzZG9jICovXG52YXIgTWFwU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBNYXA7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZGV4IGluIHByb3ZpZGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5Pn0gYXJyXHJcbiAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEluZGV4KGFyciwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAtMTtcblxuICAgICAgICBhcnIuc29tZShmdW5jdGlvbiAoZW50cnksIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gYW5vbnltb3VzKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAgICAgICAqL1xuICAgICAgICBwcm90b3R5cGVBY2Nlc3NvcnMuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2VudHJpZXNfXy5sZW5ndGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBnZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fX2VudHJpZXNfX1tpbmRleF07XG5cbiAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVsxXTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX19baW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX18ucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgICAgICovXG4gICAgICAgIGFub255bW91cy5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSB0aGlzLl9fZW50cmllc19fO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZW50cmllcywga2V5KTtcblxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xuICAgICAgICAgICAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAhIX5nZXRJbmRleCh0aGlzLl9fZW50cmllc19fLCBrZXkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xuICAgICAgICBhbm9ueW1vdXMucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAgICAgKiBAcGFyYW0geyp9IFtjdHg9bnVsbF1cclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cbiAgICAgICAgYW5vbnltb3VzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjdHgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCBjdHggPT09IHZvaWQgMCApIGN0eCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gdGhpcyQxLl9fZW50cmllc19fOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RbaV07XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGN0eCwgZW50cnlbMV0sIGVudHJ5WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggYW5vbnltb3VzLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgICAgICAgcmV0dXJuIGFub255bW91cztcbiAgICB9KCkpO1xufSkoKTtcblxuLyoqXHJcbiAqIERldGVjdHMgd2hldGhlciB3aW5kb3cgYW5kIGRvY3VtZW50IG9iamVjdHMgYXJlIGF2YWlsYWJsZSBpbiBjdXJyZW50IGVudmlyb25tZW50LlxyXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCA9PT0gZG9jdW1lbnQ7XG5cbi8vIFJldHVybnMgZ2xvYmFsIG9iamVjdCBvZiBhIGN1cnJlbnQgZW52aXJvbm1lbnQuXG52YXIgZ2xvYmFsJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoKSB7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCkge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufSkoKTtcblxuLyoqXHJcbiAqIEEgc2hpbSBmb3IgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSB3aGljaCBmYWxscyBiYWNrIHRvIHRoZSBzZXRUaW1lb3V0IGlmXHJcbiAqIGZpcnN0IG9uZSBpcyBub3Qgc3VwcG9ydGVkLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXF1ZXN0cycgaWRlbnRpZmllci5cclxuICovXG52YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEgPSAoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIEl0J3MgcmVxdWlyZWQgdG8gdXNlIGEgYm91bmRlZCBmdW5jdGlvbiBiZWNhdXNlIElFIHNvbWV0aW1lcyB0aHJvd3NcbiAgICAgICAgLy8gYW4gXCJJbnZhbGlkIGNhbGxpbmcgb2JqZWN0XCIgZXJyb3IgaWYgckFGIGlzIGludm9rZWQgd2l0aG91dCB0aGUgZ2xvYmFsXG4gICAgICAgIC8vIG9iamVjdCBvbiB0aGUgbGVmdCBoYW5kIHNpZGUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChnbG9iYWwkMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykgeyByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjYWxsYmFjayhEYXRlLm5vdygpKTsgfSwgMTAwMCAvIDYwKTsgfTtcbn0pKCk7XG5cbi8vIERlZmluZXMgbWluaW11bSB0aW1lb3V0IGJlZm9yZSBhZGRpbmcgYSB0cmFpbGluZyBjYWxsLlxudmFyIHRyYWlsaW5nVGltZW91dCA9IDI7XG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiB3aGljaCBlbnN1cmVzIHRoYXQgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZVxyXG4gKiBpbnZva2VkIG9ubHkgb25jZSBkdXJpbmcgdGhlIHNwZWNpZmllZCBkZWxheSBwZXJpb2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gYmUgaW52b2tlZCBhZnRlciB0aGUgZGVsYXkgcGVyaW9kLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgLSBEZWxheSBhZnRlciB3aGljaCB0byBpbnZva2UgY2FsbGJhY2suXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cclxuICovXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgdmFyIGxlYWRpbmdDYWxsID0gZmFsc2UsXG4gICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlLFxuICAgICAgICBsYXN0Q2FsbFRpbWUgPSAwO1xuXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSBvcmlnaW5hbCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc2NoZWR1bGVzIG5ldyBpbnZvY2F0aW9uIGlmXHJcbiAgICAgKiB0aGUgXCJwcm94eVwiIHdhcyBjYWxsZWQgZHVyaW5nIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVQZW5kaW5nKCkge1xuICAgICAgICBpZiAobGVhZGluZ0NhbGwpIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhaWxpbmdDYWxsKSB7XG4gICAgICAgICAgICBwcm94eSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIGFmdGVyIHRoZSBzcGVjaWZpZWQgZGVsYXkuIEl0IHdpbGwgZnVydGhlciBwb3N0cG9uZVxyXG4gICAgICogaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gZGVsZWdhdGluZyBpdCB0byB0aGVcclxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXRDYWxsYmFjaygpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEocmVzb2x2ZVBlbmRpbmcpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2NoZWR1bGVzIGludm9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJveHkoKSB7XG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xuICAgICAgICAgICAgLy8gUmVqZWN0IGltbWVkaWF0ZWx5IGZvbGxvd2luZyBjYWxscy5cbiAgICAgICAgICAgIGlmICh0aW1lU3RhbXAgLSBsYXN0Q2FsbFRpbWUgPCB0cmFpbGluZ1RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIG5ldyBjYWxsIHRvIGJlIGluIGludm9rZWQgd2hlbiB0aGUgcGVuZGluZyBvbmUgaXMgcmVzb2x2ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGltcG9ydGFudCBmb3IgXCJ0cmFuc2l0aW9uc1wiIHdoaWNoIG5ldmVyIGFjdHVhbGx5IHN0YXJ0XG4gICAgICAgICAgICAvLyBpbW1lZGlhdGVseSBzbyB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IHdlIG1pZ2h0IG1pc3Mgb25lIGlmIGNoYW5nZVxuICAgICAgICAgICAgLy8gaGFwcGVucyBhbWlkcyB0aGUgcGVuZGluZyBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgdHJhaWxpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXRDYWxsYmFjaywgZGVsYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZVN0YW1wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm94eTtcbn07XG5cbi8vIE1pbmltdW0gZGVsYXkgYmVmb3JlIGludm9raW5nIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLlxudmFyIFJFRlJFU0hfREVMQVkgPSAyMDtcblxuLy8gQSBsaXN0IG9mIHN1YnN0cmluZ3Mgb2YgQ1NTIHByb3BlcnRpZXMgdXNlZCB0byBmaW5kIHRyYW5zaXRpb24gZXZlbnRzIHRoYXRcbi8vIG1pZ2h0IGFmZmVjdCBkaW1lbnNpb25zIG9mIG9ic2VydmVkIGVsZW1lbnRzLlxudmFyIHRyYW5zaXRpb25LZXlzID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3NpemUnLCAnd2VpZ2h0J107XG5cbi8vIENoZWNrIGlmIE11dGF0aW9uT2JzZXJ2ZXIgaXMgYXZhaWxhYmxlLlxudmFyIG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxyXG4gKiBTaW5nbGV0b24gY29udHJvbGxlciBjbGFzcyB3aGljaCBoYW5kbGVzIHVwZGF0ZXMgb2YgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2VzLlxyXG4gKi9cbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbiAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMub2JzZXJ2ZXJzXyA9IFtdO1xuXG4gICAgdGhpcy5vblRyYW5zaXRpb25FbmRfID0gdGhpcy5vblRyYW5zaXRpb25FbmRfLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZyZXNoID0gdGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIFJFRlJFU0hfREVMQVkpO1xufTtcblxuLyoqXHJcbiAqIEFkZHMgb2JzZXJ2ZXIgdG8gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgYWRkZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogSG9sZHMgcmVmZXJlbmNlIHRvIHRoZSBjb250cm9sbGVyJ3MgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBLZWVwcyByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIE11dGF0aW9uT2JzZXJ2ZXIuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtNdXRhdGlvbk9ic2VydmVyfVxyXG4gKi9cblxuLyoqXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIERPTSBsaXN0ZW5lcnMgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgaWYgKCF+dGhpcy5vYnNlcnZlcnNfLmluZGV4T2Yob2JzZXJ2ZXIpKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzXy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIGlmIHRoZXkgaGF2ZW4ndCBiZWVuIGFkZGVkIHlldC5cbiAgICBpZiAoIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICB0aGlzLmNvbm5lY3RfKCk7XG4gICAgfVxufTtcblxuLyoqXHJcbiAqIFJlbW92ZXMgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdC5cclxuICpcclxuICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSByZW1vdmVkLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgdmFyIG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXztcbiAgICB2YXIgaW5kZXggPSBvYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XG5cbiAgICAvLyBSZW1vdmUgb2JzZXJ2ZXIgaWYgaXQncyBwcmVzZW50IGluIHJlZ2lzdHJ5LlxuICAgIGlmICh+aW5kZXgpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxpc3RlbmVycyBpZiBjb250cm9sbGVyIGhhcyBubyBjb25uZWN0ZWQgb2JzZXJ2ZXJzLlxuICAgIGlmICghb2JzZXJ2ZXJzLmxlbmd0aCAmJiB0aGlzLmNvbm5lY3RlZF8pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0XygpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLiBJdCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpbnNvZmFyXHJcbiAqIGl0IGRldGVjdHMgY2hhbmdlcy5cclxuICpcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VzRGV0ZWN0ZWQgPSB0aGlzLnVwZGF0ZU9ic2VydmVyc18oKTtcblxuICAgIC8vIENvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZCBhcyB0aGVyZSBtaWdodFxuICAgIC8vIGJlIGZ1dHVyZSBvbmVzIGNhdXNlZCBieSBDU1MgdHJhbnNpdGlvbnMuXG4gICAgaWYgKGNoYW5nZXNEZXRlY3RlZCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG59O1xuXG4vKipcclxuICogVXBkYXRlcyBldmVyeSBvYnNlcnZlciBmcm9tIG9ic2VydmVycyBsaXN0IGFuZCBub3RpZmllcyB0aGVtIG9mIHF1ZXVlZFxyXG4gKiBlbnRyaWVzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBcInRydWVcIiBpZiBhbnkgb2JzZXJ2ZXIgaGFzIGRldGVjdGVkIGNoYW5nZXMgaW5cclxuICogIGRpbWVuc2lvbnMgb2YgaXQncyBlbGVtZW50cy5cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZU9ic2VydmVyc18gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQ29sbGVjdCBvYnNlcnZlcnMgdGhhdCBoYXZlIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXG4gICAgdmFyIGFjdGl2ZU9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzXy5maWx0ZXIoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nYXRoZXJBY3RpdmUoKSwgb2JzZXJ2ZXIuaGFzQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBEZWxpdmVyIG5vdGlmaWNhdGlvbnMgaW4gYSBzZXBhcmF0ZSBjeWNsZSBpbiBvcmRlciB0byBhdm9pZCBhbnlcbiAgICAvLyBjb2xsaXNpb25zIGJldHdlZW4gb2JzZXJ2ZXJzLCBlLmcuIHdoZW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mXG4gICAgLy8gUmVzaXplT2JzZXJ2ZXIgYXJlIHRyYWNraW5nIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHRoZSBjYWxsYmFjayBvZiBvbmVcbiAgICAvLyBvZiB0aGVtIGNoYW5nZXMgY29udGVudCBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCB0YXJnZXQuIFNvbWV0aW1lc1xuICAgIC8vIHRoaXMgbWF5IHJlc3VsdCBpbiBub3RpZmljYXRpb25zIGJlaW5nIGJsb2NrZWQgZm9yIHRoZSByZXN0IG9mIG9ic2VydmVycy5cbiAgICBhY3RpdmVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLmJyb2FkY2FzdEFjdGl2ZSgpOyB9KTtcblxuICAgIHJldHVybiBhY3RpdmVPYnNlcnZlcnMubGVuZ3RoID4gMDtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmNvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IGFkZGVkLlxuICAgIGlmICghaXNCcm93c2VyIHx8IHRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3Vic2NyaXB0aW9uIHRvIHRoZSBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBpcyB1c2VkIGFzIGEgd29ya2Fyb3VuZCBmb3JcbiAgICAvLyBkZWxheWVkIHRyYW5zaXRpb25zLiBUaGlzIHdheSBpdCdzIHBvc3NpYmxlIHRvIGNhcHR1cmUgYXQgbGVhc3QgdGhlXG4gICAgLy8gZmluYWwgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmRfKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgaWYgKG11dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBuZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01TdWJ0cmVlTW9kaWZpZWQnLCB0aGlzLnJlZnJlc2gpO1xuXG4gICAgICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XG59O1xuXG4vKipcclxuICogUmVtb3ZlcyBET00gbGlzdGVuZXJzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXG4gICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXRoaXMuY29ubmVjdGVkXykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kXyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMucmVmcmVzaCk7XG5cbiAgICBpZiAodGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8pIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8uZGlzY29ubmVjdCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XG4gICAgfVxuXG4gICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8gPSBudWxsO1xuICAgIHRoaXMubXV0YXRpb25FdmVudHNBZGRlZF8gPSBmYWxzZTtcbiAgICB0aGlzLmNvbm5lY3RlZF8gPSBmYWxzZTtcbn07XG5cbi8qKlxyXG4gKiBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBoYW5kbGVyLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAcGFyYW0ge1RyYW5zaXRpb25FdmVudH0gZXZlbnRcclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmRfID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gcmVmLnByb3BlcnR5TmFtZTsgaWYgKCBwcm9wZXJ0eU5hbWUgPT09IHZvaWQgMCApIHByb3BlcnR5TmFtZSA9ICcnO1xuXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgdHJhbnNpdGlvbiBtYXkgYWZmZWN0IGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudC5cbiAgICB2YXIgaXNSZWZsb3dQcm9wZXJ0eSA9IHRyYW5zaXRpb25LZXlzLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gISF+cHJvcGVydHlOYW1lLmluZGV4T2Yoa2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChpc1JlZmxvd1Byb3BlcnR5KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBSZXR1cm5zIGluc3RhbmNlIG9mIHRoZSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZV8pIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZV8gPSBuZXcgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VfO1xufTtcblxuUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmluc3RhbmNlXyA9IG51bGw7XG5cbi8qKlxyXG4gKiBEZWZpbmVzIG5vbi13cml0YWJsZS9lbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHByb3ZpZGVkIHRhcmdldCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBPYmplY3QgZm9yIHdoaWNoIHRvIGRlZmluZSBwcm9wZXJ0aWVzLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBQcm9wZXJ0aWVzIHRvIGJlIGRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRhcmdldCBvYmplY3QuXHJcbiAqL1xudmFyIGRlZmluZUNvbmZpZ3VyYWJsZSA9IChmdW5jdGlvbiAodGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gT2JqZWN0LmtleXMocHJvcHMpOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2V5ID0gbGlzdFtpXTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wc1trZXldLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn0pO1xuXG4vKipcclxuICogUmV0dXJucyB0aGUgZ2xvYmFsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggcHJvdmlkZWQgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cbnZhciBnZXRXaW5kb3dPZiA9IChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gQXNzdW1lIHRoYXQgdGhlIGVsZW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgTm9kZSwgd2hpY2ggbWVhbnMgdGhhdCBpdFxuICAgIC8vIGhhcyB0aGUgXCJvd25lckRvY3VtZW50XCIgcHJvcGVydHkgZnJvbSB3aGljaCB3ZSBjYW4gcmV0cmlldmUgYVxuICAgIC8vIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9iamVjdC5cbiAgICB2YXIgb3duZXJHbG9iYWwgPSB0YXJnZXQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQgJiYgdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAvLyBSZXR1cm4gdGhlIGxvY2FsIGdsb2JhbCBvYmplY3QgaWYgaXQncyBub3QgcG9zc2libGUgZXh0cmFjdCBvbmUgZnJvbVxuICAgIC8vIHByb3ZpZGVkIGVsZW1lbnQuXG4gICAgcmV0dXJuIG93bmVyR2xvYmFsIHx8IGdsb2JhbCQxO1xufSk7XG5cbi8vIFBsYWNlaG9sZGVyIG9mIGFuIGVtcHR5IGNvbnRlbnQgcmVjdGFuZ2xlLlxudmFyIGVtcHR5UmVjdCA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xuXG4vKipcclxuICogQ29udmVydHMgcHJvdmlkZWQgc3RyaW5nIHRvIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xuZnVuY3Rpb24gdG9GbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgYm9yZGVycyBzaXplIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gcG9zaXRpb25zIC0gQm9yZGVycyBwb3NpdGlvbnMgKHRvcCwgcmlnaHQsIC4uLilcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgIHdoaWxlICggbGVuLS0gPiAwICkgcG9zaXRpb25zWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNpemUsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1snYm9yZGVyLScgKyBwb3NpdGlvbiArICctd2lkdGgnXTtcblxuICAgICAgICByZXR1cm4gc2l6ZSArIHRvRmxvYXQodmFsdWUpO1xuICAgIH0sIDApO1xufVxuXG4vKipcclxuICogRXh0cmFjdHMgcGFkZGluZ3Mgc2l6ZXMgZnJvbSBwcm92aWRlZCBzdHlsZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFBhZGRpbmdzIGJveC5cclxuICovXG5mdW5jdGlvbiBnZXRQYWRkaW5ncyhzdHlsZXMpIHtcbiAgICB2YXIgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbiAgICB2YXIgcGFkZGluZ3MgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcG9zaXRpb25zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBsaXN0W2ldO1xuXG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlc1sncGFkZGluZy0nICsgcG9zaXRpb25dO1xuXG4gICAgICAgIHBhZGRpbmdzW3Bvc2l0aW9uXSA9IHRvRmxvYXQodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYWRkaW5ncztcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgU1ZHIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U1ZHR3JhcGhpY3NFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzXHJcbiAqICAgICAgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cbmZ1bmN0aW9uIGdldFNWR0NvbnRlbnRSZWN0KHRhcmdldCkge1xuICAgIHZhciBiYm94ID0gdGFyZ2V0LmdldEJCb3goKTtcblxuICAgIHJldHVybiBjcmVhdGVSZWN0SW5pdCgwLCAwLCBiYm94LndpZHRoLCBiYm94LmhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIEhUTUxFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpIHtcbiAgICAvLyBDbGllbnQgd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBjYW4ndCBiZVxuICAgIC8vIHVzZWQgZXhjbHVzaXZlbHkgYXMgdGhleSBwcm92aWRlIHJvdW5kZWQgdmFsdWVzLlxuICAgIHZhciBjbGllbnRXaWR0aCA9IHRhcmdldC5jbGllbnRXaWR0aDtcbiAgICB2YXIgY2xpZW50SGVpZ2h0ID0gdGFyZ2V0LmNsaWVudEhlaWdodDtcblxuICAgIC8vIEJ5IHRoaXMgY29uZGl0aW9uIHdlIGNhbiBjYXRjaCBhbGwgbm9uLXJlcGxhY2VkIGlubGluZSwgaGlkZGVuIGFuZFxuICAgIC8vIGRldGFjaGVkIGVsZW1lbnRzLiBUaG91Z2ggZWxlbWVudHMgd2l0aCB3aWR0aCAmIGhlaWdodCBwcm9wZXJ0aWVzIGxlc3NcbiAgICAvLyB0aGFuIDAuNSB3aWxsIGJlIGRpc2NhcmRlZCBhcyB3ZWxsLlxuICAgIC8vXG4gICAgLy8gV2l0aG91dCBpdCB3ZSB3b3VsZCBuZWVkIHRvIGltcGxlbWVudCBzZXBhcmF0ZSBtZXRob2RzIGZvciBlYWNoIG9mXG4gICAgLy8gdGhvc2UgY2FzZXMgYW5kIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBwcmVjaXNlIGFuZCBwZXJmb3JtYW5jZVxuICAgIC8vIGVmZmVjdGl2ZSB0ZXN0IGZvciBoaWRkZW4gZWxlbWVudHMuIEUuZy4gZXZlbiBqUXVlcnkncyAnOnZpc2libGUnIGZpbHRlclxuICAgIC8vIGdpdmVzIHdyb25nIHJlc3VsdHMgZm9yIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgbGVzcyB0aGFuIDAuNS5cbiAgICBpZiAoIWNsaWVudFdpZHRoICYmICFjbGllbnRIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gZ2V0V2luZG93T2YodGFyZ2V0KS5nZXRDb21wdXRlZFN0eWxlKHRhcmdldCk7XG4gICAgdmFyIHBhZGRpbmdzID0gZ2V0UGFkZGluZ3Moc3R5bGVzKTtcbiAgICB2YXIgaG9yaXpQYWQgPSBwYWRkaW5ncy5sZWZ0ICsgcGFkZGluZ3MucmlnaHQ7XG4gICAgdmFyIHZlcnRQYWQgPSBwYWRkaW5ncy50b3AgKyBwYWRkaW5ncy5ib3R0b207XG5cbiAgICAvLyBDb21wdXRlZCBzdHlsZXMgb2Ygd2lkdGggJiBoZWlnaHQgYXJlIGJlaW5nIHVzZWQgYmVjYXVzZSB0aGV5IGFyZSB0aGVcbiAgICAvLyBvbmx5IGRpbWVuc2lvbnMgYXZhaWxhYmxlIHRvIEpTIHRoYXQgY29udGFpbiBub24tcm91bmRlZCB2YWx1ZXMuIEl0IGNvdWxkXG4gICAgLy8gYmUgcG9zc2libGUgdG8gdXRpbGl6ZSB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlmIG9ubHkgaXQncyBkYXRhIHdhc24ndFxuICAgIC8vIGFmZmVjdGVkIGJ5IENTUyB0cmFuc2Zvcm1hdGlvbnMgbGV0IGFsb25lIHBhZGRpbmdzLCBib3JkZXJzIGFuZCBzY3JvbGwgYmFycy5cbiAgICB2YXIgd2lkdGggPSB0b0Zsb2F0KHN0eWxlcy53aWR0aCksXG4gICAgICAgIGhlaWdodCA9IHRvRmxvYXQoc3R5bGVzLmhlaWdodCk7XG5cbiAgICAvLyBXaWR0aCAmIGhlaWdodCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHdoZW4gdGhlICdib3JkZXItYm94JyBib3hcbiAgICAvLyBtb2RlbCBpcyBhcHBsaWVkIChleGNlcHQgZm9yIElFKS5cbiAgICBpZiAoc3R5bGVzLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgIC8vIEZvbGxvd2luZyBjb25kaXRpb25zIGFyZSByZXF1aXJlZCB0byBoYW5kbGUgSW50ZXJuZXQgRXhwbG9yZXIgd2hpY2hcbiAgICAgICAgLy8gZG9lc24ndCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHRvIGNvbXB1dGVkIENTUyBkaW1lbnNpb25zLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXZSBjYW4gc2F5IHRoYXQgaWYgQ1NTIGRpbWVuc2lvbnMgKyBwYWRkaW5ncyBhcmUgZXF1YWwgdG8gdGhlIFwiY2xpZW50XCJcbiAgICAgICAgLy8gcHJvcGVydGllcyB0aGVuIGl0J3MgZWl0aGVyIElFLCBhbmQgdGh1cyB3ZSBkb24ndCBuZWVkIHRvIHN1YnRyYWN0XG4gICAgICAgIC8vIGFueXRoaW5nLCBvciBhbiBlbGVtZW50IG1lcmVseSBkb2Vzbid0IGhhdmUgcGFkZGluZ3MvYm9yZGVycyBzdHlsZXMuXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpICE9PSBjbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgd2lkdGggLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAnbGVmdCcsICdyaWdodCcpICsgaG9yaXpQYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5yb3VuZChoZWlnaHQgKyB2ZXJ0UGFkKSAhPT0gY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICBoZWlnaHQgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAndG9wJywgJ2JvdHRvbScpICsgdmVydFBhZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvbGxvd2luZyBzdGVwcyBjYW4ndCBiZSBhcHBsaWVkIHRvIHRoZSBkb2N1bWVudCdzIHJvb3QgZWxlbWVudCBhcyBpdHNcbiAgICAvLyBjbGllbnRbV2lkdGgvSGVpZ2h0XSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB2aWV3cG9ydCBhcmVhIG9mIHRoZSB3aW5kb3cuXG4gICAgLy8gQmVzaWRlcywgaXQncyBhcyB3ZWxsIG5vdCBuZWNlc3NhcnkgYXMgdGhlIDxodG1sPiBpdHNlbGYgbmVpdGhlciBoYXNcbiAgICAvLyByZW5kZXJlZCBzY3JvbGwgYmFycyBub3IgaXQgY2FuIGJlIGNsaXBwZWQuXG4gICAgaWYgKCFpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMgKG9ubHkgaW4gRmlyZWZveCwgYWN0dWFsbHkpIENTUyB3aWR0aCAmIGhlaWdodFxuICAgICAgICAvLyBpbmNsdWRlIHNjcm9sbCBiYXJzIHNpemUgd2hpY2ggY2FuIGJlIHJlbW92ZWQgYXQgdGhpcyBzdGVwIGFzIHNjcm9sbFxuICAgICAgICAvLyBiYXJzIGFyZSB0aGUgb25seSBkaWZmZXJlbmNlIGJldHdlZW4gcm91bmRlZCBkaW1lbnNpb25zICsgcGFkZGluZ3NcbiAgICAgICAgLy8gYW5kIFwiY2xpZW50XCIgcHJvcGVydGllcywgdGhvdWdoIHRoYXQgaXMgbm90IGFsd2F5cyB0cnVlIGluIENocm9tZS5cbiAgICAgICAgdmFyIHZlcnRTY3JvbGxiYXIgPSBNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpIC0gY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBob3JpelNjcm9sbGJhciA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgLSBjbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgLy8gQ2hyb21lIGhhcyBhIHJhdGhlciB3ZWlyZCByb3VuZGluZyBvZiBcImNsaWVudFwiIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIEUuZy4gZm9yIGFuIGVsZW1lbnQgd2l0aCBjb250ZW50IHdpZHRoIG9mIDMxNC4ycHggaXQgc29tZXRpbWVzIGdpdmVzXG4gICAgICAgIC8vIHRoZSBjbGllbnQgd2lkdGggb2YgMzE1cHggYW5kIGZvciB0aGUgd2lkdGggb2YgMzE0LjdweCBpdCBtYXkgZ2l2ZVxuICAgICAgICAvLyAzMTRweC4gQW5kIGl0IGRvZXNuJ3QgaGFwcGVuIGFsbCB0aGUgdGltZS4gU28ganVzdCBpZ25vcmUgdGhpcyBkZWx0YVxuICAgICAgICAvLyBhcyBhIG5vbi1yZWxldmFudC5cbiAgICAgICAgaWYgKE1hdGguYWJzKHZlcnRTY3JvbGxiYXIpICE9PSAxKSB7XG4gICAgICAgICAgICB3aWR0aCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGhvcml6U2Nyb2xsYmFyKSAhPT0gMSkge1xuICAgICAgICAgICAgaGVpZ2h0IC09IGhvcml6U2Nyb2xsYmFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlY3RJbml0KHBhZGRpbmdzLmxlZnQsIHBhZGRpbmdzLnRvcCwgd2lkdGgsIGhlaWdodCk7XG59XG5cbi8qKlxyXG4gKiBDaGVja3Mgd2hldGhlciBwcm92aWRlZCBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIHRoZSBTVkdHcmFwaGljc0VsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG52YXIgaXNTVkdHcmFwaGljc0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWUgYnJvd3NlcnMsIG5hbWVseSBJRSBhbmQgRWRnZSwgZG9uJ3QgaGF2ZSB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50XG4gICAgLy8gaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCkgeyByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdHcmFwaGljc0VsZW1lbnQ7IH07XG4gICAgfVxuXG4gICAgLy8gSWYgaXQncyBzbywgdGhlbiBjaGVjayB0aGF0IGVsZW1lbnQgaXMgYXQgbGVhc3QgYW4gaW5zdGFuY2Ugb2YgdGhlXG4gICAgLy8gU1ZHRWxlbWVudCBhbmQgdGhhdCBpdCBoYXMgdGhlIFwiZ2V0QkJveFwiIG1ldGhvZC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuU1ZHRWxlbWVudCAmJiB0eXBlb2YgdGFyZ2V0LmdldEJCb3ggPT09ICdmdW5jdGlvbic7IH07XG59KSgpO1xuXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhIGRvY3VtZW50IGVsZW1lbnQgKDxodG1sPikuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBiZSBjaGVja2VkLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGFyZ2V0ID09PSBnZXRXaW5kb3dPZih0YXJnZXQpLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYW4gYXBwcm9wcmlhdGUgY29udGVudCByZWN0YW5nbGUgZm9yIHByb3ZpZGVkIGh0bWwgb3Igc3ZnIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCBjb250ZW50IHJlY3RhbmdsZSBvZiB3aGljaCBuZWVkcyB0byBiZSBjYWxjdWxhdGVkLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGVudFJlY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UmVjdDtcbiAgICB9XG5cbiAgICBpZiAoaXNTVkdHcmFwaGljc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICByZXR1cm4gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRDb250ZW50UmVjdCh0YXJnZXQpO1xufVxuXG4vKipcclxuICogQ3JlYXRlcyByZWN0YW5nbGUgd2l0aCBhbiBpbnRlcmZhY2Ugb2YgdGhlIERPTVJlY3RSZWFkT25seS5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RvbXJlY3RyZWFkb25seVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIE9iamVjdCB3aXRoIHJlY3RhbmdsZSdzIHgveSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucy5cclxuICogQHJldHVybnMge0RPTVJlY3RSZWFkT25seX1cclxuICovXG5mdW5jdGlvbiBjcmVhdGVSZWFkT25seVJlY3QocmVmKSB7XG4gICAgdmFyIHggPSByZWYueDtcbiAgICB2YXIgeSA9IHJlZi55O1xuICAgIHZhciB3aWR0aCA9IHJlZi53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVmLmhlaWdodDtcblxuICAgIC8vIElmIERPTVJlY3RSZWFkT25seSBpcyBhdmFpbGFibGUgdXNlIGl0IGFzIGEgcHJvdG90eXBlIGZvciB0aGUgcmVjdGFuZ2xlLlxuICAgIHZhciBDb25zdHIgPSB0eXBlb2YgRE9NUmVjdFJlYWRPbmx5ICE9PSAndW5kZWZpbmVkJyA/IERPTVJlY3RSZWFkT25seSA6IE9iamVjdDtcbiAgICB2YXIgcmVjdCA9IE9iamVjdC5jcmVhdGUoQ29uc3RyLnByb3RvdHlwZSk7XG5cbiAgICAvLyBSZWN0YW5nbGUncyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlLlxuICAgIGRlZmluZUNvbmZpZ3VyYWJsZShyZWN0LCB7XG4gICAgICAgIHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICAgICAgYm90dG9tOiBoZWlnaHQgKyB5LFxuICAgICAgICBsZWZ0OiB4XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVjdDtcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgRE9NUmVjdEluaXQgb2JqZWN0IGJhc2VkIG9uIHRoZSBwcm92aWRlZCBkaW1lbnNpb25zIGFuZCB0aGUgeC95IGNvb3JkaW5hdGVzLlxyXG4gKiBTcGVjOiBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZGljdGRlZi1kb21yZWN0aW5pdFxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFggY29vcmRpbmF0ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBZIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFJlY3RhbmdsZSdzIHdpZHRoLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gUmVjdGFuZ2xlJ3MgaGVpZ2h0LlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdEluaXQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgIHJldHVybiB7IHg6IHgsIHk6IHksIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbn1cblxuLyoqXHJcbiAqIENsYXNzIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGF0aW9ucyBvZiB0aGUgY29udGVudCByZWN0YW5nbGUgb2ZcclxuICogcHJvdmlkZWQgRE9NIGVsZW1lbnQgYW5kIGZvciBrZWVwaW5nIHRyYWNrIG9mIGl0J3MgY2hhbmdlcy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2YXRpb24gPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gMDtcbiAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IDA7XG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSBjcmVhdGVSZWN0SW5pdCgwLCAwLCAwLCAwKTtcblxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgY29udGVudCByZWN0YW5nbGUgYW5kIHRlbGxzIHdoZXRoZXIgaXQncyB3aWR0aCBvciBoZWlnaHQgcHJvcGVydGllc1xyXG4gKiBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgYnJvYWRjYXN0LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5cblxuLyoqXHJcbiAqIFJlZmVyZW5jZSB0byB0aGUgbGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICpcclxuICogQHByaXZhdGUge0RPTVJlY3RJbml0fVxyXG4gKi9cblxuXG4vKipcclxuICogQnJvYWRjYXN0ZWQgd2lkdGggb2YgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xuUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q29udGVudFJlY3QodGhpcy50YXJnZXQpO1xuXG4gICAgdGhpcy5jb250ZW50UmVjdF8gPSByZWN0O1xuXG4gICAgcmV0dXJuIHJlY3Qud2lkdGggIT09IHRoaXMuYnJvYWRjYXN0V2lkdGggfHwgcmVjdC5oZWlnaHQgIT09IHRoaXMuYnJvYWRjYXN0SGVpZ2h0O1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZXMgJ2Jyb2FkY2FzdFdpZHRoJyBhbmQgJ2Jyb2FkY2FzdEhlaWdodCcgcHJvcGVydGllcyB3aXRoIGEgZGF0YVxyXG4gKiBmcm9tIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnRpZXMgb2YgdGhlIGxhc3Qgb2JzZXJ2ZWQgY29udGVudCByZWN0YW5nbGUuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtET01SZWN0SW5pdH0gTGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICovXG5SZXNpemVPYnNlcnZhdGlvbi5wcm90b3R5cGUuYnJvYWRjYXN0UmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IHRoaXMuY29udGVudFJlY3RfO1xuXG4gICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgdGhpcy5icm9hZGNhc3RIZWlnaHQgPSByZWN0LmhlaWdodDtcblxuICAgIHJldHVybiByZWN0O1xufTtcblxudmFyIFJlc2l6ZU9ic2VydmVyRW50cnkgPSBmdW5jdGlvbih0YXJnZXQsIHJlY3RJbml0KSB7XG4gICAgdmFyIGNvbnRlbnRSZWN0ID0gY3JlYXRlUmVhZE9ubHlSZWN0KHJlY3RJbml0KTtcblxuICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlXG4gICAgLy8gYW5kIGFyZSBhbHNvIG5vdCBlbnVtZXJhYmxlIGluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uXG4gICAgLy9cbiAgICAvLyBQcm9wZXJ0eSBhY2Nlc3NvcnMgYXJlIG5vdCBiZWluZyB1c2VkIGFzIHRoZXknZCByZXF1aXJlIHRvIGRlZmluZSBhXG4gICAgLy8gcHJpdmF0ZSBXZWFrTWFwIHN0b3JhZ2Ugd2hpY2ggbWF5IGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycyB0aGF0XG4gICAgLy8gZG9uJ3Qgc3VwcG9ydCB0aGlzIHR5cGUgb2YgY29sbGVjdGlvbnMuXG4gICAgZGVmaW5lQ29uZmlndXJhYmxlKHRoaXMsIHsgdGFyZ2V0OiB0YXJnZXQsIGNvbnRlbnRSZWN0OiBjb250ZW50UmVjdCB9KTtcbn07XG5cbnZhciBSZXNpemVPYnNlcnZlclNQSSA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250cm9sbGVyLCBjYWxsYmFja0N0eCkge1xuICAgIHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXyA9IFtdO1xuICAgIHRoaXMub2JzZXJ2YXRpb25zXyA9IG5ldyBNYXBTaGltKCk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGxiYWNrXyA9IGNhbGxiYWNrO1xuICAgIHRoaXMuY29udHJvbGxlcl8gPSBjb250cm9sbGVyO1xuICAgIHRoaXMuY2FsbGJhY2tDdHhfID0gY2FsbGJhY2tDdHg7XG59O1xuXG4vKipcclxuICogU3RhcnRzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgb2JzZXJ2ZWQuXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblxuXG4vKipcclxuICogUmVnaXN0cnkgb2YgdGhlIFJlc2l6ZU9ic2VydmF0aW9uIGluc3RhbmNlcy5cclxuICpcclxuICogQHByaXZhdGUge01hcDxFbGVtZW50LCBSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuXG5cbi8qKlxyXG4gKiBQdWJsaWMgUmVzaXplT2JzZXJ2ZXIgaW5zdGFuY2Ugd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrXHJcbiAqIGZ1bmN0aW9uIGFuZCB1c2VkIGFzIGEgdmFsdWUgb2YgaXQncyBcInRoaXNcIiBiaW5kaW5nLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZSB7UmVzaXplT2JzZXJ2ZXJ9XHJcbiAqL1xuXG4vKipcclxuICogQ29sbGVjdGlvbiBvZiByZXNpemUgb2JzZXJ2YXRpb25zIHRoYXQgaGF2ZSBkZXRlY3RlZCBjaGFuZ2VzIGluIGRpbWVuc2lvbnNcclxuICogb2YgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcbiAgICB9XG5cbiAgICAvLyBEbyBub3RoaW5nIGlmIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lc24ndCBoYXZlIHRoZSBFbGVtZW50IGludGVyZmFjZS5cbiAgICBpZiAodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICEoRWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XG4gICAgfVxuXG4gICAgdmFyIG9ic2VydmF0aW9ucyA9IHRoaXMub2JzZXJ2YXRpb25zXztcblxuICAgIC8vIERvIG5vdGhpbmcgaWYgZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIG9ic2VydmVkLlxuICAgIGlmIChvYnNlcnZhdGlvbnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9ic2VydmF0aW9ucy5zZXQodGFyZ2V0LCBuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSk7XG5cbiAgICB0aGlzLmNvbnRyb2xsZXJfLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgLy8gRm9yY2UgdGhlIHVwZGF0ZSBvZiBvYnNlcnZhdGlvbnMuXG4gICAgdGhpcy5jb250cm9sbGVyXy5yZWZyZXNoKCk7XG59O1xuXG4vKipcclxuICogU3RvcHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBzdG9wIG9ic2VydmluZy5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxuICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5FbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSBcIkVsZW1lbnRcIi4nKTtcbiAgICB9XG5cbiAgICB2YXIgb2JzZXJ2YXRpb25zID0gdGhpcy5vYnNlcnZhdGlvbnNfO1xuXG4gICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIG5vdCBiZWluZyBvYnNlcnZlZC5cbiAgICBpZiAoIW9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb2JzZXJ2YXRpb25zLmRlbGV0ZSh0YXJnZXQpO1xuXG4gICAgaWYgKCFvYnNlcnZhdGlvbnMuc2l6ZSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIGVsZW1lbnRzLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsZWFyQWN0aXZlKCk7XG4gICAgdGhpcy5vYnNlcnZhdGlvbnNfLmNsZWFyKCk7XG4gICAgdGhpcy5jb250cm9sbGVyXy5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbn07XG5cbi8qKlxyXG4gKiBDb2xsZWN0cyBvYnNlcnZhdGlvbiBpbnN0YW5jZXMgdGhlIGFzc29jaWF0ZWQgZWxlbWVudCBvZiB3aGljaCBoYXMgY2hhbmdlZFxyXG4gKiBpdCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuZ2F0aGVyQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcblxuICAgIHRoaXMub2JzZXJ2YXRpb25zXy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICBpZiAob2JzZXJ2YXRpb24uaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgdGhpcyQxLmFjdGl2ZU9ic2VydmF0aW9uc18ucHVzaChvYnNlcnZhdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbnZva2VzIGluaXRpYWwgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBhIGxpc3Qgb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeVxyXG4gKiBpbnN0YW5jZXMgY29sbGVjdGVkIGZyb20gYWN0aXZlIHJlc2l6ZSBvYnNlcnZhdGlvbnMuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2b2lkfVxyXG4gKi9cblJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5icm9hZGNhc3RBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBvYnNlcnZlciBkb2Vzbid0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cbiAgICBpZiAoIXRoaXMuaGFzQWN0aXZlKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjdHggPSB0aGlzLmNhbGxiYWNrQ3R4XztcblxuICAgIC8vIENyZWF0ZSBSZXNpemVPYnNlcnZlckVudHJ5IGluc3RhbmNlIGZvciBldmVyeSBhY3RpdmUgb2JzZXJ2YXRpb24uXG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubWFwKGZ1bmN0aW9uIChvYnNlcnZhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFJlc2l6ZU9ic2VydmVyRW50cnkob2JzZXJ2YXRpb24udGFyZ2V0LCBvYnNlcnZhdGlvbi5icm9hZGNhc3RSZWN0KCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jYWxsYmFja18uY2FsbChjdHgsIGVudHJpZXMsIGN0eCk7XG4gICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xufTtcblxuLyoqXHJcbiAqIENsZWFycyB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuY2xlYXJBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLnNwbGljZSgwKTtcbn07XG5cbi8qKlxyXG4gKiBUZWxscyB3aGV0aGVyIG9ic2VydmVyIGhhcyBhY3RpdmUgb2JzZXJ2YXRpb25zLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXG5SZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUuaGFzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ubGVuZ3RoID4gMDtcbn07XG5cbi8vIFJlZ2lzdHJ5IG9mIGludGVybmFsIG9ic2VydmVycy4gSWYgV2Vha01hcCBpcyBub3QgYXZhaWxhYmxlIHVzZSBjdXJyZW50IHNoaW1cbi8vIGZvciB0aGUgTWFwIGNvbGxlY3Rpb24gYXMgaXQgaGFzIGFsbCByZXF1aXJlZCBtZXRob2RzIGFuZCBiZWNhdXNlIFdlYWtNYXBcbi8vIGNhbid0IGJlIGZ1bGx5IHBvbHlmaWxsZWQgYW55d2F5LlxudmFyIG9ic2VydmVycyA9IHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyA/IG5ldyBXZWFrTWFwKCkgOiBuZXcgTWFwU2hpbSgpO1xuXG4vKipcclxuICogUmVzaXplT2JzZXJ2ZXIgQVBJLiBFbmNhcHN1bGF0ZXMgdGhlIFJlc2l6ZU9ic2VydmVyIFNQSSBpbXBsZW1lbnRhdGlvblxyXG4gKiBleHBvc2luZyBvbmx5IHRob3NlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgc3BlYy5cclxuICovXG52YXIgUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZXNpemVPYnNlcnZlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uLicpO1xuICAgIH1cbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LicpO1xuICAgIH1cblxuICAgIHZhciBjb250cm9sbGVyID0gUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyU1BJKGNhbGxiYWNrLCBjb250cm9sbGVyLCB0aGlzKTtcblxuICAgIG9ic2VydmVycy5zZXQodGhpcywgb2JzZXJ2ZXIpO1xufTtcblxuLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzIG9mIFJlc2l6ZU9ic2VydmVyLlxuWydvYnNlcnZlJywgJ3Vub2JzZXJ2ZScsICdkaXNjb25uZWN0J10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAocmVmID0gb2JzZXJ2ZXJzLmdldCh0aGlzKSlbbWV0aG9kXS5hcHBseShyZWYsIGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciByZWY7XG4gICAgfTtcbn0pO1xuXG52YXIgaW5kZXggPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIEV4cG9ydCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBpZiBhdmFpbGFibGUuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyO1xuICAgIH1cblxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiLy8gSGFjayB0byBnZXQgaHRtbCBzeW50YXggaGlnaGxpZ2h0aW5nIHdpdGhpbiB0ZW1wbGF0ZSBsaXRlcmFsc1xuZXhwb3J0IGRlZmF1bHQgU3RyaW5nLnJhdztcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAgICAgYmFja2dyb3VuZDogdmFyKC0tYWNjZW50LWNvbG9yLCAjZWQxYTU5KTtcbiAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yLCAjMjEyMTIxKTtcbiAgICAgIGZvbnQtc2l6ZTogMi43NWVtO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYm9yZGVyLXJhZGl1czogMCAwIDE1cHggMTVweDtcbiAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMXMgZWFzZSwgZm9udC1zaXplIC43cyBlYXNlLWluLW91dCAuM3M7XG4gICAgfVxuICA8L3N0eWxlPlxuICA8c2xvdD48L3Nsb3Q+XG5gO1xuXG5jbGFzcyBNbVRvb2xiYXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiBTaGFkeUNTUyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlKHRtcGwsICdtbS10b29sYmFyJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS10b29sYmFyJywgTW1Ub29sYmFyKTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgZGlzcGxheTogLW1vei1ib3g7XG4gICAgICBkaXNwbGF5OiAtbXMtZmxleGJveDtcbiAgICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgZmxleDogMTtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG5cbiAgICAucGxheSB7XG4gICAgICBjb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yLCAjZWQxYTU5KTtcbiAgICAgIGZvbnQtc2l6ZTogMi41ZW07XG4gICAgICBwYWRkaW5nOiAxZW07XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBib3JkZXI6IDFweCB2YXIoLS1hY2NlbnQtY29sb3IsICNlZDFhNTkpIHNvbGlkO1xuICAgICAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgICAgIHRyYW5zaXRpb246IGFsbCAuNXMgZWFzZTtcbiAgICB9XG5cbiAgICAuaGlkZSB7IFxuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgICAucGxheTpob3ZlciB7XG4gICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvciwgIzIxMjEyMSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IsICNlZDFhNTkpO1xuICAgIH1cblxuICA8L3N0eWxlPlxuICA8c3BhbiBpZD1cInBsYXlCdXR0b25cIiBjbGFzcz1cInBsYXlcIj5QbGF5PC9zcGFuPlxuYDtcblxuY2xhc3MgTW1QbGF5IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tcGxheScpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICAgIC8vIEF0dGFjaCBhIHNoYWRvdyByb290IHRvIHRoZSBlbGVtZW50LlxuICAgIGxldCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0bXBsLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcblxuICAgIHRoaXMucGxheSA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI3BsYXlCdXR0b24nKTtcbiAgfVxuXG4gIHNldFBsYXlMaXN0ZW5lcihjKSB7XG4gICAgdGhpcy5wbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYyk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMucGxheS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gIH1cbn1cbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ21tLXBsYXknLCBNbVBsYXkpO1xuIiwiaW1wb3J0IGh0bWwgZnJvbSAnLi9odG1sLm1qcyc7XG5cbmNvbnN0IHRtcGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xudG1wbC5pbm5lckhUTUwgPSBodG1sYFxuICA8c3R5bGU+XG4gICAgOmhvc3Qge1xuICAgICAgYmFja2dyb3VuZDogIzM0MzQzNDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgLjNzIGVhc2UtaW4tb3V0O1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmNsYXNzIE1tQ2lyY2xlIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tY2lyY2xlJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuICB9XG5cbiAgc2l6ZSh3aWR0aCwgaGVpZ2h0LCBzcGFjaW5nKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGAke3dpZHRoID4gaGVpZ2h0ID8gaGVpZ2h0IC0gc3BhY2luZyA6IHdpZHRoIC0gc3BhY2luZ31weGA7XG4gICAgdGhpcy5zdHlsZS53aWR0aCA9IHNpemU7XG4gICAgdGhpcy5zdHlsZS5oZWlnaHQgPSBzaXplO1xuICB9XG5cbiAgY29sb3IoY29sb3IpIHtcbiAgICB0aGlzLnN0eWxlLmJhY2tncm91bmQgPSBjb2xvcjtcbiAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW0tY2lyY2xlJywgTW1DaXJjbGUpO1xuIiwiaW1wb3J0IGh0bWwgZnJvbSAnLi9odG1sLm1qcyc7XG5pbXBvcnQgJy4vbW0tY2lyY2xlLm1qcyc7XG5pbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSAnLi8uLi9ub2RlX21vZHVsZXMvcmVzaXplLW9ic2VydmVyLXBvbHlmaWxsL2Rpc3QvUmVzaXplT2JzZXJ2ZXIuZXMuanMnO1xuXG5jb25zdCB0bXBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbnRtcGwuaW5uZXJIVE1MID0gaHRtbGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBmbGV4OiAxO1xuICAgICAgbWFyZ2luOiAycHg7XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgLjdzIGVhc2UtaW4tb3V0O1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgfVxuXG4gICAgLnRyYW5zaXRpb24ge1xuICAgICAgdHJhbnNpdGlvbjogYWxsIC41cyBlYXNlLWluLW91dDtcbiAgICB9XG5cbiAgICAuaGlkZGVue1xuICAgICAgaGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gICAgICB3aWR0aDogMCAhaW1wb3J0YW50O1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG5cbiAgPC9zdHlsZT5cbiAgPG1tLWNpcmNsZT48L21tLWNpcmNsZT5cbiAgPG1tLWNpcmNsZSBjbGFzcz1cImhpZGRlblwiPjwvbW0tY2lyY2xlPlxuICA8bW0tY2lyY2xlIGNsYXNzPVwiaGlkZGVuXCI+PC9tbS1jaXJjbGU+XG4gIDxtbS1jaXJjbGUgY2xhc3M9XCJoaWRkZW5cIj48L21tLWNpcmNsZT5cbmA7XG5cbmNsYXNzIE1tQm9hcmRJdGVtIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tYm9hcmQtaXRlbScpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICAgIC8vIEF0dGFjaCBhIHNoYWRvdyByb290IHRvIHRoZSBlbGVtZW50LlxuICAgIGxldCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0bXBsLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcblxuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG5cbiAgICB0aGlzLmNpcmNsZXMgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ21tLWNpcmNsZScpO1xuICAgIHRoaXMuY2lyY2xlcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgaWYgKCFjLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpIGMuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJvID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZW50cnkuY29udGVudFJlY3Q7XG4gICAgICAgIHRoaXMuY2lyY2xlcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgIGMuc2l6ZSh3aWR0aCwgaGVpZ2h0LCA1KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcm8ub2JzZXJ2ZSh0aGlzKTtcbiAgfVxuXG4gIHNldEFjdGl2ZShib29sKSB7XG4gICAgdGhpcy5hY3RpdmUgPSBib29sO1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZTtcbiAgfVxuXG4gIGFuaW1hdGUoKSB7XG4gICAgdGhpcy5zdHlsZS5mbGV4ID0gdGhpcy5hY3RpdmUgPyAxMCA6IDE7XG4gICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICB0aGlzLnNob3dDaXJjbGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGlkZUNpcmNsZXMoKTtcbiAgICB9XG4gICAgLy8gdGhpcy5hY3RpdmUgPyB0aGlzLnNob3dDaXJjbGVzKCkgOiB0aGlzLmhpZGVDaXJjbGVzKCk7XG4gIH1cblxuICBzaG93Q2lyY2xlcygpIHtcbiAgICB0aGlzLnNob3dpbmdDaXJjbGVzID0gdHJ1ZTtcbiAgICB0aGlzLmNpcmNsZXMuZm9yRWFjaCgoYywgaSkgPT4ge1xuICAgICAgYy5jbGFzc0xpc3QuYWRkKCd0cmFuc2l0aW9uJyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgYy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgIH0sIDEwMCAqIGkpO1xuICAgIH0pO1xuICB9XG5cbiAgaGlkZUNpcmNsZXMoKSB7XG4gICAgaWYgKCF0aGlzLnNob3dpbmdDaXJjbGVzKSByZXR1cm47XG4gICAgdGhpcy5jaXJjbGVzLmZvckVhY2goKGMsIGkpID0+IHtcbiAgICAgIGlmICghYy5hY3RpdmUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgYy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSwgMTAwICogaSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGMuY2xhc3NMaXN0LnJlbW92ZSgndHJhbnNpdGlvbicpO1xuICAgICAgICB9LCA2MDAgKiBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGMuY2xhc3NMaXN0LnJlbW92ZSgndHJhbnNpdGlvbicpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc2hvd2luZ0NpcmNsZXMgPSBmYWxzZTtcbiAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW0tYm9hcmQtaXRlbScsIE1tQm9hcmRJdGVtKTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuaW1wb3J0ICcuL21tLWNpcmNsZS5tanMnO1xuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJy4vLi4vbm9kZV9tb2R1bGVzL3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbC9kaXN0L1Jlc2l6ZU9ic2VydmVyLmVzLmpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBtYXJnaW46IDJweDtcbiAgICB9XG5cbiAgICAua2V5cy1yb3cge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG5cbiAgICBtbS1jaXJjbGUge1xuICAgICAgbWFyZ2luOiAycHg7XG4gICAgfVxuXG4gIDwvc3R5bGU+XG4gIDxkaXYgY2xhc3M9XCJrZXlzLXJvd1wiPlxuICAgIDxtbS1jaXJjbGU+PC9tbS1jaXJjbGU+XG4gICAgPG1tLWNpcmNsZT48L21tLWNpcmNsZT5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJrZXlzLXJvd1wiPlxuICAgIDxtbS1jaXJjbGU+PC9tbS1jaXJjbGU+XG4gICAgPG1tLWNpcmNsZT48L21tLWNpcmNsZT5cbiAgPC9kaXY+XG5gO1xuXG5jbGFzcyBNbUJvYXJkUmVzdWx0IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tYm9hcmQtcmVzdWx0Jyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuXG4gICAgdGhpcy5jaXJjbGVzID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCdtbS1jaXJjbGUnKTtcblxuICAgIGNvbnN0IHJvID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZW50cnkuY29udGVudFJlY3Q7XG4gICAgICAgIHRoaXMuY2lyY2xlcy5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgIGMuc2l6ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIsIDUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByby5vYnNlcnZlKHRoaXMpO1xuICB9XG5cbiAgc2V0UmVzdWx0KHsgaGl0cywgcHNldWRvSGl0cyB9KSB7XG4gICAgdGhpcy5jaXJjbGVzLmZvckVhY2goYyA9PiB7XG4gICAgICBpZiAoaGl0cy0tID4gMCkgYy5jb2xvcigncmVkJyk7XG4gICAgICBlbHNlIGlmIChwc2V1ZG9IaXRzLS0gPiAwKSBjLmNvbG9yKCd3aGl0ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH0pO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS1ib2FyZC1yZXN1bHQnLCBNbUJvYXJkUmVzdWx0KTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuaW1wb3J0ICcuL21tLWJvYXJkLWl0ZW0ubWpzJztcbmltcG9ydCAnLi9tbS1ib2FyZC1yZXN1bHQubWpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cblxuICA8L3N0eWxlPlxuICA8bW0tYm9hcmQtaXRlbT48L21tLWJvYXJkLWl0ZW0+XG4gIDxtbS1ib2FyZC1pdGVtPjwvbW0tYm9hcmQtaXRlbT5cbiAgPG1tLWJvYXJkLWl0ZW0+PC9tbS1ib2FyZC1pdGVtPlxuICA8bW0tYm9hcmQtaXRlbT48L21tLWJvYXJkLWl0ZW0+XG4gIDxtbS1ib2FyZC1yZXN1bHQ+PC9tbS1ib2FyZC1yZXN1bHQ+XG5gO1xuXG5jbGFzcyBNbUJvYXJkUm93IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tYm9hcmQtcm93Jyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuXG4gICAgdGhpcy5pdGVtcyA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvckFsbCgnbW0tYm9hcmQtaXRlbScpO1xuICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpID0+XG4gICAgICBpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLmJpbmQodGhpcykpXG4gICAgKTtcblxuICAgIC8qIHRoaXMucmVzdWx0ID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdtbS1ib2FyZC1yZXN1bHQnKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVzdWx0LnNldFJlc3VsdCh7XG4gICAgICAgIGhpdHM6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMpLFxuICAgICAgICBwc2V1ZG9IaXRzOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzKVxuICAgICAgfSk7XG4gICAgfSwgNTApOyAqL1xuICB9XG5cbiAgb25DbGljayhlKSB7XG4gICAgY29uc3QgaSA9IGUudGFyZ2V0O1xuICAgIGlmIChpLmFjdGl2ZSkgcmV0dXJuO1xuICAgIGxldCB3YWl0ID0gZmFsc2U7XG4gICAgdGhpcy5pdGVtcy5mb3JFYWNoKGkgPT4ge1xuICAgICAgaWYgKGkuc2hvd2luZ0NpcmNsZXMpIHdhaXQgPSB0cnVlO1xuICAgICAgaS5zZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgaS5hbmltYXRlKCk7XG4gICAgfSk7XG4gICAgaS5zZXRBY3RpdmUodHJ1ZSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpLmFuaW1hdGUoKTtcbiAgICB9LCB3YWl0ID8gNDAwIDogMjAwKTtcbiAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW0tYm9hcmQtcm93JywgTW1Cb2FyZFJvdyk7XG4iLCJpbXBvcnQgaHRtbCBmcm9tICcuL2h0bWwubWpzJztcbmltcG9ydCAnLi9tbS1ib2FyZC1yb3cubWpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuXG4gICAgbW0tYm9hcmQtcm93IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4OiAxO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXgtd2lkdGg6IDYwMHB4O1xuICAgIH1cbiAgPC9zdHlsZT5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbiAgPG1tLWJvYXJkLXJvdz48L21tLWJvYXJkLXJvdz5cbmA7XG5cbmNsYXNzIE1tQm9hcmQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKHR5cGVvZiBTaGFkeUNTUyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgU2hhZHlDU1MucHJlcGFyZVRlbXBsYXRlKHRtcGwsICdtbS1ib2FyZCcpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICBTaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICAgIC8vIEF0dGFjaCBhIHNoYWRvdyByb290IHRvIHRoZSBlbGVtZW50LlxuICAgIGxldCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0bXBsLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgfVxufVxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnbW0tYm9hcmQnLCBNbUJvYXJkKTtcbiIsImltcG9ydCBodG1sIGZyb20gJy4vaHRtbC5tanMnO1xuaW1wb3J0ICcuL21tLXRvb2xiYXIubWpzJztcbmltcG9ydCAnLi9tbS1wbGF5Lm1qcyc7XG5pbXBvcnQgJy4vbW0tYm9hcmQubWpzJztcblxuY29uc3QgdG1wbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG50bXBsLmlubmVySFRNTCA9IGh0bWxgXG4gIDxzdHlsZT5cbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgICAgIGRpc3BsYXk6IC1tb3otYm94O1xuICAgICAgZGlzcGxheTogLW1zLWZsZXhib3g7XG4gICAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleDogMTtcbiAgICB9XG5cbiAgICBtbS10b29sYmFyLnRvb2xiYXIge1xuICAgICAgbWF4LWhlaWdodDogNjRweDtcbiAgICAgIGZvbnQtc2l6ZTogMS43NWVtO1xuICAgIH1cbiAgICBcbiAgPC9zdHlsZT5cbiAgPG1tLXRvb2xiYXIgY2xhc3M9XCJ0b29sYmFyXCI+TWFzdGVybWluZDwvbW0tdG9vbGJhcj5cbiAgPCEtLSA8bW0tcGxheT48L21tLXBsYXk+IC0tPlxuICA8bW0tYm9hcmQ+PC9tbS1ib2FyZD5cbmA7XG5cbmNsYXNzIE1tQXBwIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmICh0eXBlb2YgU2hhZHlDU1MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZSh0bXBsLCAnbW0tYXBwJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICAgIFNoYWR5Q1NTLnN0eWxlRWxlbWVudCh0aGlzKTtcbiAgICB9XG4gICAgLy8gQXR0YWNoIGEgc2hhZG93IHJvb3QgdG8gdGhlIGVsZW1lbnQuXG4gICAgbGV0IHNoYWRvd1Jvb3QgPSB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICBzaGFkb3dSb290LmFwcGVuZENoaWxkKHRtcGwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkpO1xuXG4gICAgdGhpcy50b29sYmFyID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdtbS10b29sYmFyJyk7XG4gICAgLy8gdGhpcy5wbGF5ID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCdtbS1wbGF5Jyk7XG4gICAgLy8gdGhpcy5wbGF5LnNldFBsYXlMaXN0ZW5lcigoKSA9PiB7XG4gICAgLy8gICB0aGlzLnRvb2xiYXIuY2xhc3NMaXN0LmFkZCgndG9vbGJhcicpO1xuICAgIC8vICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnBsYXkuaGlkZSgpLCA1MDApO1xuICAgIC8vIH0pO1xuICB9XG59XG53aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdtbS1hcHAnLCBNbUFwcCk7XG4iLCJpbXBvcnQgJy4vbW0tYXBwLm1qcyc7XG5pbXBvcnQgTWFzdGVyIGZyb20gJy4vbWFzdGVyLm1qcyc7XG5cbi8vIGhpdCAgfCBwc2V1ZG9cbmNvbnN0IGMxID0gWzMsIDIsIDIsIDBdO1xuY29uc3QgYzIgPSBbMiwgMSwgMSwgMF07XG4vLyAxICB8IDFcblxuY29uc3QgbWFzdGVyID0gbmV3IE1hc3Rlcih7IHNvbHV0aW9uOiBjMSB9KTtcbi8vIGNvbnNvbGUubG9nKG1hc3Rlci5ndWVzcyh7IGd1ZXNzOiBjMiB9KSk7XG5jb25zb2xlLmxvZyhtYXN0ZXIudHJ5KHsgZ3Vlc3M6IGMyIH0pKTtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hc3RlciB7XG4gIGNvbnN0cnVjdG9yKHsgc29sdXRpb24sIHRyaWVzID0gMTIgfSkge1xuICAgIHRoaXMuc29sdXRpb24gPSBzb2x1dGlvbjtcbiAgICB0aGlzLnRyaWVzID0gdHJpZXM7XG4gICAgdGhpcy5jYWxjID0gdGhpcy5jYWxjO1xuICAgIHRoaXMudHJ5ID0gdGhpcy50cnk7XG4gIH1cblxuICB0cnkoeyBndWVzcyA9IFtdIH0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLmd1ZXNzKHsgZ3Vlc3MgfSksIHsgdHJpZXM6IC0tdGhpcy50cmllcyB9KTtcbiAgfVxuXG4gIGd1ZXNzKHsgZ3Vlc3MgPSBbXSB9KSB7XG4gICAgaWYgKGd1ZXNzLmxlbmd0aCAhPT0gdGhpcy5zb2x1dGlvbi5sZW5ndGgpIHJldHVybjtcblxuICAgIGNvbnN0IG9iaiA9IHsgaGl0czogMCwgcHNldWRvSGl0czogMCB9O1xuICAgIGNvbnN0IHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbi5zbGljZSgpOyAvLyBDb3B5XG4gICAgY29uc3QgZnJlcSA9IG5ldyBBcnJheSh0aGlzLnNvbHV0aW9uLmxlbmd0aCkuZmlsbCgwKTtcblxuICAgIGd1ZXNzLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgIGlmICh2ID09PSB0aGlzLnNvbHV0aW9uW2ldKSB7XG4gICAgICAgIG9iai5oaXRzICs9IDE7XG4gICAgICAgIHNvbHV0aW9uW2ldID0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmVxW3ZdKys7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmcmVxLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgIGlmICh2ID4gMCAmJiB0aGlzLnNvbHV0aW9uLmluY2x1ZGVzKGkpKSBvYmoucHNldWRvSGl0cysrO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInBhcnNlRmxvYXQiLCJwb3NpdGlvbnMiLCJsZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZWR1Y2UiLCJzaXplIiwidG9GbG9hdCIsInN0eWxlcyIsIk1hdGgiLCJhYnMiLCJyb3VuZCIsImNsaWVudFdpZHRoIiwidGFyZ2V0IiwiY2xpZW50SGVpZ2h0IiwiZ2V0V2luZG93T2YiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFkZGluZ3MiLCJpIiwibGlzdCIsInBvc2l0aW9uIiwidmFsdWUiLCJnZXRQYWRkaW5ncyIsImhvcml6UGFkIiwibGVmdCIsInJpZ2h0IiwidmVydFBhZCIsInRvcCIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwiYm94U2l6aW5nIiwiZ2V0Qm9yZGVyc1NpemUiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImlzRG9jdW1lbnRFbGVtZW50IiwidmVydFNjcm9sbGJhciIsImhvcml6U2Nyb2xsYmFyIiwiY3JlYXRlUmVjdEluaXQiLCJpc0Jyb3dzZXIiLCJpc1NWR0dyYXBoaWNzRWxlbWVudCIsImJib3giLCJnZXRCQm94IiwiZ2V0U1ZHQ29udGVudFJlY3QiLCJnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0IiwieCIsInkiLCJTdHJpbmciLCJyYXciLCJ0bXBsIiwiaW5uZXJIVE1MIiwiaHRtbCIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiSFRNTEVsZW1lbnQiLCJTaGFkeUNTUyIsInByZXBhcmVUZW1wbGF0ZSIsInN0eWxlRWxlbWVudCIsInRoaXMiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwiYXBwZW5kQ2hpbGQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwic2hhZG93Um9vdCIsInBsYXkiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInN0eWxlIiwiYmFja2dyb3VuZCIsIk1hcFNoaW0iLCJyZXN1bHQiLCJhcnIiLCJzb21lIiwiZW50cnkiLCJNYXAiLCJfX2VudHJpZXNfXyIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNvbmZpZ3VyYWJsZSIsImdldCIsImFub255bW91cyIsInByb3RvdHlwZSIsImluZGV4IiwiZ2V0SW5kZXgiLCJzZXQiLCJwdXNoIiwiZGVsZXRlIiwiZW50cmllcyIsInNwbGljZSIsImhhcyIsImNsZWFyIiwiZm9yRWFjaCIsImN0eCIsImNhbGxiYWNrIiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJnbG9iYWwkMSIsImdsb2JhbCIsInNlbGYiLCJGdW5jdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSQxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYmluZCIsInNldFRpbWVvdXQiLCJEYXRlIiwibm93IiwidHJhbnNpdGlvbktleXMiLCJtdXRhdGlvbk9ic2VydmVyU3VwcG9ydGVkIiwiTXV0YXRpb25PYnNlcnZlciIsIlJlc2l6ZU9ic2VydmVyQ29udHJvbGxlciIsImNvbm5lY3RlZF8iLCJtdXRhdGlvbkV2ZW50c0FkZGVkXyIsIm11dGF0aW9uc09ic2VydmVyXyIsIm9ic2VydmVyc18iLCJvblRyYW5zaXRpb25FbmRfIiwicmVmcmVzaCIsImxlYWRpbmdDYWxsIiwidHJhaWxpbmdDYWxsIiwicHJveHkiLCJ0aW1lU3RhbXAiLCJsYXN0Q2FsbFRpbWUiLCJ0aHJvdHRsZSIsImFkZE9ic2VydmVyIiwiaW5kZXhPZiIsImNvbm5lY3RfIiwicmVtb3ZlT2JzZXJ2ZXIiLCJvYnNlcnZlcnMiLCJkaXNjb25uZWN0XyIsInVwZGF0ZU9ic2VydmVyc18iLCJhY3RpdmVPYnNlcnZlcnMiLCJmaWx0ZXIiLCJvYnNlcnZlciIsImdhdGhlckFjdGl2ZSIsImhhc0FjdGl2ZSIsImJyb2FkY2FzdEFjdGl2ZSIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzY29ubmVjdCIsInByb3BlcnR5TmFtZSIsInJlZiIsImdldEluc3RhbmNlIiwiaW5zdGFuY2VfIiwiZGVmaW5lQ29uZmlndXJhYmxlIiwia2V5cyIsImRlZmluZVByb3BlcnR5IiwicHJvcHMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJlbXB0eVJlY3QiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJTVkdFbGVtZW50IiwiUmVzaXplT2JzZXJ2YXRpb24iLCJicm9hZGNhc3RXaWR0aCIsImJyb2FkY2FzdEhlaWdodCIsImNvbnRlbnRSZWN0XyIsImlzQWN0aXZlIiwicmVjdCIsImdldENvbnRlbnRSZWN0IiwiYnJvYWRjYXN0UmVjdCIsIlJlc2l6ZU9ic2VydmVyRW50cnkiLCJDb25zdHIiLCJjb250ZW50UmVjdCIsIkRPTVJlY3RSZWFkT25seSIsImNyZWF0ZSIsIlJlc2l6ZU9ic2VydmVyU1BJIiwiYWN0aXZlT2JzZXJ2YXRpb25zXyIsIm9ic2VydmF0aW9uc18iLCJUeXBlRXJyb3IiLCJjYWxsYmFja18iLCJjb250cm9sbGVyXyIsImNhbGxiYWNrQ3R4XyIsIkVsZW1lbnQiLCJvYnNlcnZhdGlvbnMiLCJ1bm9ic2VydmUiLCJjbGVhckFjdGl2ZSIsInRoaXMkMSIsIm9ic2VydmF0aW9uIiwibWFwIiwiV2Vha01hcCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udHJvbGxlciIsImFwcGx5IiwiY3JlYXRlRWxlbWVudCIsImFjdGl2ZSIsImNpcmNsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYyIsImNvbnRhaW5zIiwiZmxleCIsInNob3dDaXJjbGVzIiwiaGlkZUNpcmNsZXMiLCJzaG93aW5nQ2lyY2xlcyIsInJlbW92ZSIsImhpdHMiLCJwc2V1ZG9IaXRzIiwiY29sb3IiLCJpdGVtcyIsIm9uQ2xpY2siLCJlIiwid2FpdCIsInNldEFjdGl2ZSIsImFuaW1hdGUiLCJ0b29sYmFyIiwibWFzdGVyIiwic29sdXRpb24iLCJ0cmllcyIsImNhbGMiLCJ0cnkiLCJndWVzcyIsImFzc2lnbiIsIm9iaiIsInNsaWNlIiwiZnJlcSIsIkFycmF5IiwiZmlsbCIsInYiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJ5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
