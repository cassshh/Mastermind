!function(){"use strict";function j(a){return parseFloat(a)||0}function f(a){for(var b=[],c=arguments.length-1;0<c--;)b[c]=arguments[c+1];return b.reduce(function(b,c){return b+j(a["border-"+c+"-width"])},0)}function c(b){var e=Math.abs,h=b.clientWidth,k=b.clientHeight;if(!h&&!k)return u;var p=m(b).getComputedStyle(b),q=function(a){for(var b={},c=0,d=["top","right","bottom","left"];c<d.length;c+=1){var e=d[c],f=a["padding-"+e];b[e]=j(f)}return b}(p),n=q.left+q.right,o=q.top+q.bottom,r=j(p.width),a=j(p.height);if("border-box"===p.boxSizing&&(g(r+n)!==h&&(r-=f(p,"left","right")+n),g(a+o)!==k&&(a-=f(p,"top","bottom")+o)),!function(a){return a===m(a).document.documentElement}(b)){var c=g(r+n)-h,l=g(a+o)-k;1!==e(c)&&(r-=c),1!==e(l)&&(a-=l)}return v(q.left,q.top,r,a)}function q(a){return n?p(a)?function(a){var b=a.getBBox();return v(0,0,b.width,b.height)}(a):c(a):u}function v(a,b,c,d){return{x:a,y:b,width:c,height:d}}var g=Math.round,w=String.raw;const e=document.createElement("template");e.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      width: 100%;
      flex: 1;
      max-height: 100%;
      background: var(--accent-color, #ed1a59);
      color: var(--primary-color, #212121);
      font-size: 2.75em;
      align-items: center;
      justify-content: center;
      border-radius: 0 0 15px 15px;
      transition: max-height 1s ease, font-size .7s ease-in-out .3s;
    }
  </style>
  <slot></slot>
`,window.customElements.define("mm-toolbar",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(e,"mm-toolbar"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(e.content.cloneNode(!0))}});const t=document.createElement("template");t.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    .play {
      color: var(--accent-color, #ed1a59);
      font-size: 2.5em;
      padding: 1em;
      cursor: pointer;
      border: 1px var(--accent-color, #ed1a59) solid;
      border-radius: 15px;
      transition: all .5s ease;
    }

    .hide { 
      opacity: 0;
    }

    .play:hover {
      color: var(--primary-color, #212121);
      background-color: var(--accent-color, #ed1a59);
    }

  </style>
  <span id="playButton" class="play">Play</span>
`,window.customElements.define("mm-play",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(t,"mm-play"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(t.content.cloneNode(!0)),this.play=a.querySelector("#playButton")}setPlayListener(a){this.play.addEventListener("click",a)}hide(){this.play.classList.add("hide")}});const i=document.createElement("template");i.innerHTML=w`
  <style>
    :host {
      background: #343434;
      border-radius: 50%;
      opacity: .2;
      transition: background .3s ease-in-out, opacity .3s ease-in-out;
    }
  </style>
`,window.customElements.define("mm-circle",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(i,"mm-circle"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(i.content.cloneNode(!0))}setSize(a,b,c){const d=`${a>b?b-c:a-c}px`;this.style.width=d,this.style.height=d}setColor(a){this.style.background=a}setValue(a){this.value=a}setSelected(a){this.selected=a,this.setActive(this.selected)}setActive(a){this.style.opacity=a?1:.2}});var s=function(){function a(a,b){var c=-1;return a.some(function(a,d){return a[0]===b&&(c=d,!0)}),c}return"undefined"==typeof Map?function(){function b(){this.__entries__=[]}var c={size:{configurable:!0}};return c.size.get=function(){return this.__entries__.length},b.prototype.get=function(b){var c=a(this.__entries__,b),d=this.__entries__[c];return d&&d[1]},b.prototype.set=function(b,c){var d=a(this.__entries__,b);~d?this.__entries__[d][1]=c:this.__entries__.push([b,c])},b.prototype.delete=function(b){var c=this.__entries__,d=a(c,b);~d&&c.splice(d,1)},b.prototype.has=function(b){return!!~a(this.__entries__,b)},b.prototype.clear=function(){this.__entries__.splice(0)},b.prototype.forEach=function(a,b){void 0===b&&(b=null);for(var c,d=0,e=this.__entries__;d<e.length;d+=1)c=e[d],a.call(b,c[1],c[0])},Object.defineProperties(b.prototype,c),b}():Map}(),n="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,o="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),r="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(o):function(a){return setTimeout(function(){return a(Date.now())},1e3/60)},a=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,d=function(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(a,b){function c(){f&&(f=!1,a()),g&&e()}function d(){r(c)}function e(){var a=Date.now();if(f){if(a-h<2)return;g=!0}else f=!0,g=!1,setTimeout(d,b);h=a}var f=!1,g=!1,h=0;return e}(this.refresh.bind(this),20)};d.prototype.addObserver=function(a){~this.observers_.indexOf(a)||this.observers_.push(a),this.connected_||this.connect_()},d.prototype.removeObserver=function(a){var b=this.observers_,c=b.indexOf(a);~c&&b.splice(c,1),!b.length&&this.connected_&&this.disconnect_()},d.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},d.prototype.updateObservers_=function(){var a=this.observers_.filter(function(a){return a.gatherActive(),a.hasActive()});return a.forEach(function(a){return a.broadcastActive()}),0<a.length},d.prototype.connect_=function(){n&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},d.prototype.disconnect_=function(){n&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},d.prototype.onTransitionEnd_=function(b){var c=b.propertyName;void 0===c&&(c=""),a.some(function(a){return!!~c.indexOf(a)})&&this.refresh()},d.getInstance=function(){return this.instance_||(this.instance_=new d),this.instance_},d.instance_=null;var h=function(a,b){for(var c,d=0,e=Object.keys(b);d<e.length;d+=1)c=e[d],Object.defineProperty(a,c,{value:b[c],enumerable:!1,writable:!1,configurable:!0});return a},m=function(a){return a&&a.ownerDocument&&a.ownerDocument.defaultView||o},u=v(0,0,0,0),p="undefined"==typeof SVGGraphicsElement?function(a){return a instanceof m(a).SVGElement&&"function"==typeof a.getBBox}:function(a){return a instanceof m(a).SVGGraphicsElement},b=function(a){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=v(0,0,0,0),this.target=a};b.prototype.isActive=function(){var a=q(this.target);return this.contentRect_=a,a.width!==this.broadcastWidth||a.height!==this.broadcastHeight},b.prototype.broadcastRect=function(){var a=this.contentRect_;return this.broadcastWidth=a.width,this.broadcastHeight=a.height,a};var y=function(b,d){var f,g,i,j,k,m,a,c=(g=(f=d).x,i=f.y,j=f.width,k=f.height,m="undefined"==typeof DOMRectReadOnly?Object:DOMRectReadOnly,a=Object.create(m.prototype),h(a,{x:g,y:i,width:j,height:k,top:i,right:g+j,bottom:k+i,left:g}),a);h(this,{target:b,contentRect:c})},B=function(a,b,c){if(this.activeObservations_=[],this.observations_=new s,"function"!=typeof a)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=a,this.controller_=b,this.callbackCtx_=c};B.prototype.observe=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var c=this.observations_;c.has(a)||(c.set(a,new b(a)),this.controller_.addObserver(this),this.controller_.refresh())}},B.prototype.unobserve=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var b=this.observations_;b.has(a)&&(b.delete(a),b.size||this.controller_.removeObserver(this))}},B.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},B.prototype.gatherActive=function(){var a=this;this.clearActive(),this.observations_.forEach(function(b){b.isActive()&&a.activeObservations_.push(b)})},B.prototype.broadcastActive=function(){if(this.hasActive()){var a=this.callbackCtx_,b=this.activeObservations_.map(function(a){return new y(a.target,a.broadcastRect())});this.callback_.call(a,b,a),this.clearActive()}},B.prototype.clearActive=function(){this.activeObservations_.splice(0)},B.prototype.hasActive=function(){return 0<this.activeObservations_.length};var x="undefined"==typeof WeakMap?new s:new WeakMap,D=function(a){if(!(this instanceof D))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var b=d.getInstance(),c=new B(a,b,this);x.set(this,c)};["observe","unobserve","disconnect"].forEach(function(a){D.prototype[a]=function(){return(b=x.get(this))[a].apply(b,arguments);var b}});var C=void 0===o.ResizeObserver?D:o.ResizeObserver;const k=["#FAFAFA","#F44336","#2196F3","#4CAF50","#FFEB3B","#FF9800"],A=document.createElement("template");A.innerHTML=w`
  <style>
    :host {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      margin: 2px;
      transition: all .7s ease-in-out;
    }

    .transition {
      transition: all .5s ease-in-out, margin 1s ease-in-out;
    }

    .hidden {
      height: 0 !important;
      width: 0 !important;
      opacity: 0;
    }

  </style>
  <mm-circle></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
  <mm-circle class="hidden"></mm-circle>
`,window.customElements.define("mm-board-item",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(A,"mm-board-item"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(A.content.cloneNode(!0)),this.active=!1,this.animating=!1,this.dnd=!1,this.onClick=this.onClick.bind(this),this.circles=a.querySelectorAll("mm-circle"),this.circles.forEach((a,b)=>{a.setValue(b),a.setColor(k[b]),a.classList.contains("hidden")||(a.active=!0)}),new C((a)=>{for(const b of a){const{width:a,height:c}=b.contentRect;this.circles.forEach((b)=>{this.showingCircles||this.animating?(b.setSize(a/1.2,c/1.2,5),b.style.margin="0 2px"):(b.setSize(a,c,5),b.style.margin="0")})}}).observe(this)}setActive(a){return this.active=a,this.active}animate(){this.style.flex=this.active?10:1,this.active?this.showCircles():this.hideCircles()}showCircles(){this.showingCircles=!0,this.circles.forEach((a,b)=>{a.addEventListener("click",this.onClick,!0),a.setActive(!0),a.classList.add("transition"),setTimeout(()=>{a.classList.remove("hidden")},100*b)})}hideCircles(){this.showingCircles&&(this.animating=!0,this.dnd=!0,this.circles.forEach((a,b)=>{a.removeEventListener("click",this.onClick,!0),a.setActive(a.selected),a.active?(this.animating=!1,setTimeout(()=>{a.classList.remove("transition"),this.dnd=!1},600)):setTimeout(()=>{a.classList.add("hidden"),setTimeout(()=>{a.classList.remove("transition")},600)},100*b)}),this.showingCircles=!1)}onClick(a){a.stopPropagation(),this.circles.forEach((b)=>{b.active=b===a.target,b.setSelected(b===a.target)}),this.setActive(!1),this.animate(),this.dispatchEvent(new CustomEvent("selected",{}))}getSelected(){let a=null;return this.circles.forEach((b)=>{b.selected&&(a=b)}),a}});const E=document.createElement("template");E.innerHTML=w`
  <style>
    :host {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex: 0;
      margin: 2px;
      transition: all .5s ease-in-out;
    }

    .keys-row {
      display: flex;
      flex: 0;
      width: 100%;
      align-items: center;
      justify-content: center;
      transition: all .5s ease-in-out;
    }

    .send-container {
      display: flex;
      flex: 0;
      width: 100%;
      transition: all .5s ease-in-out;
    }

    .send {
      display: flex;
      flex: 0;
      height: unset;
      width: 0;
      transition: all .5s ease-in-out;
    }

    #arrow {
      fill: #FAFAFA;
    }

  </style>
  <div class="keys-row">
    <mm-circle></mm-circle>
    <mm-circle></mm-circle>
  </div>
  <div class="send-container">
  <svg class="send" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="24px" height="24px" viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
    <g id="boxes"> <g id="ui_x5F_spec_x5F_header_copy_3" display="none"> </g> <path fill="none" d="M0,0h24v24H0V0z"/> </g> <g id="arrow"> <g id="ui_x5F_spec_x5F_header_copy_6" display="none"> </g> <path d="M3.4,20.4l17.45-7.48c0.81-0.35,0.81-1.49,0-1.84L3.4,3.6C2.74,3.31,2.01,3.8,2.01,4.51L2,9.12c0,0.5,0.37,0.93,0.87,0.99 L17,12L2.87,13.88C2.37,13.95,2,14.38,2,14.88l0.01,4.61C2.01,20.2,2.74,20.69,3.4,20.4z"/> </g>
  </svg>
  </div>
  <div class="keys-row">
    <mm-circle></mm-circle>
    <mm-circle></mm-circle>
  </div>
`,window.customElements.define("mm-board-result",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(E,"mm-board-result"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(E.content.cloneNode(!0)),this.showResult=!1,this.onClick=this.onClick.bind(this),this.sendContainer=a.querySelector(".send-container"),this.send=a.querySelector(".send"),this.send.addEventListener("click",this.onClick),this.keysRows=a.querySelectorAll(".keys-row"),this.circles=a.querySelectorAll("mm-circle");const b=new C((a)=>{for(const b of a){const{width:a,height:c}=b.contentRect;this.circles.forEach((b)=>{this.showResult&&b.setSize(a,c,5)})}});this.keysRows.forEach((a)=>{b.observe(a)})}showSend(a){a&&!this.showResult?(this.style.flex=1,this.sendContainer.style.flex=1,setTimeout(()=>this.send.style.flex=1,100)):(this.showResult=!0,this.sendContainer.style.justifyContent="flex-end",this.send.style.flex=0,setTimeout(()=>{this.sendContainer.style.flex=0,this.keysRows.forEach((a)=>{a.style.flex=1}),this.circles.forEach((a)=>{a.style.margin="2px"})},150))}setResult({hits:a,pseudoHits:b}){this.keysRows.forEach((a)=>a.style.flex=1),this.circles.forEach((c,d)=>{c.setActive(!0),0<a--?setTimeout(()=>c.setColor("red"),300*d):0<b--&&setTimeout(()=>c.setColor("#FAFAFA"),300*d)})}onClick(){this.showSend(!1),this.dispatchEvent(new CustomEvent("send",{}))}});const F=document.createElement("template");F.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      transition: opacity .3s ease-in-out;
    }

  </style>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-item></mm-board-item>
  <mm-board-result></mm-board-result>
`,window.customElements.define("mm-board-row",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(F,"mm-board-row"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(F.content.cloneNode(!0)),this.onClick=this.onClick.bind(this),this.validateSend=this.validateSend.bind(this),this.validateCode=this.validateCode.bind(this),this.setResult=this.setResult.bind(this),this.items=a.querySelectorAll("mm-board-item"),this.result=a.querySelector("mm-board-result")}onClick(a){const b=a.target;if(b.active||b.dnd)return;let c=!1;this.items.forEach((a)=>{a.showingCircles&&(c=!0),a.setActive(!1),a.animate()}),b.setActive(!0),setTimeout(()=>{b.animate()},c?600:200)}setActive(a){this.style.flex=a?1.1:1,this.style.opacity=a||this.result.showResult?1:.2,a?(this.items.forEach((a)=>{a.addEventListener("click",this.onClick),a.addEventListener("selected",this.validateSend)}),this.result.addEventListener("send",this.validateCode)):(this.items.forEach((a)=>{a.removeEventListener("click",this.onClick),a.removeEventListener("selected",this.validateSend)}),this.result.removeEventListener("send",this.validateCode))}validateSend(){let a=!0;this.items.forEach((b)=>{b.getSelected()||(a=!1)}),a&&this.result.showSend(!0)}validateCode(){const a=[];this.items.forEach((b)=>{b.setActive(!1),b.animate(),a.push(b.getSelected().value)}),this.dispatchEvent(new CustomEvent("try",{detail:{code:a}}))}setResult(a){this.result.setResult(a)}});const G=document.createElement("template");G.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    mm-board-row {
      display: flex;
      flex: 1;
      width: 100%;
      max-width: 600px;
      transition: all .5s ease;
    }
  </style>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
`,window.customElements.define("mm-board",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(G,"mm-board"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(G.content.cloneNode(!0)),this.try=this.try.bind(this),this.rows=a.querySelectorAll("mm-board-row")}setGame(a){this.master=a,this.setActive(a.tries-1)}setActive(a){this.rows.forEach((b,c)=>{a===c?b.addEventListener("try",this.try):b.removeEventListener("try",this.try),setTimeout(()=>{b.setActive(a===c)},0)})}try(a){const b=this.master.try({guess:a.detail.code});return this.rows[b.tries].setResult(b),4==b.hits?(this.rows[b.tries].setActive(!1),console.log("WIN :D")):b.tries?this.setActive(b.tries-1):(this.rows[b.tries].setActive(!1),console.log("Game over noob"))}});class H{constructor({tries:a=12}={}){this.solution=this.generate(),this.tries=a,this.try=this.try.bind(this),this.guess=this.guess}try({guess:a=[]}){return Object.assign(this.guess({guess:a}),{tries:--this.tries})}guess({guess:a=[]}){if(a.length!==this.solution.length)return{};const b={hits:0,pseudoHits:0},c=this.solution.slice(),d=Array(this.solution.length).fill(0);return a.forEach((a,e)=>{a===this.solution[e]?(b.hits+=1,c[e]=-1):d[a]++}),d.forEach((a,c)=>{0<a&&this.solution.includes(c)&&b.pseudoHits++}),b}generate(){return[,,,,].fill(0).map(()=>this.random())}random(){return g(5*Math.random())}}const I=document.createElement("template");I.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex: 1;
    }

    mm-toolbar.toolbar {
      max-height: 64px;
      font-size: 1.75em;
    }
    
  </style>
  <mm-toolbar class="toolbar">Mastermind</mm-toolbar>
  <!-- <mm-play></mm-play> -->
  <mm-board></mm-board>
`,window.customElements.define("mm-app",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(I,"mm-app"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(I.content.cloneNode(!0)),this.toolbar=a.querySelector("mm-toolbar"),this.board=a.querySelector("mm-board"),this.newGame()}newGame(){this.master=new H,console.log(this.master.solution),this.board.setGame(this.master)}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
