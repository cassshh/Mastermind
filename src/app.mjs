!function(){"use strict";function j(a){return parseFloat(a)||0}function f(a){for(var b=[],c=arguments.length-1;0<c--;)b[c]=arguments[c+1];return b.reduce(function(b,c){return b+j(a["border-"+c+"-width"])},0)}function c(b){var e=Math.abs,g=Math.round,h=b.clientWidth,k=b.clientHeight;if(!h&&!k)return u;var p=m(b).getComputedStyle(b),o=function(a){for(var b={},c=0,d=["top","right","bottom","left"];c<d.length;c+=1){var e=d[c],f=a["padding-"+e];b[e]=j(f)}return b}(p),r=o.left+o.right,i=o.top+o.bottom,s=j(p.width),a=j(p.height);if("border-box"===p.boxSizing&&(g(s+r)!==h&&(s-=f(p,"left","right")+r),g(a+i)!==k&&(a-=f(p,"top","bottom")+i)),!function(a){return a===m(a).document.documentElement}(b)){var c=g(s+r)-h,l=g(a+i)-k;1!==e(c)&&(s-=c),1!==e(l)&&(a-=l)}return q(o.left,o.top,s,a)}function b(a){return r?p(a)?function(a){var b=a.getBBox();return q(0,0,b.width,b.height)}(a):c(a):u}function q(a,b,c,d){return{x:a,y:b,width:c,height:d}}var w=String.raw;const e=document.createElement("template");e.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      width: 100%;
      flex: 1;
      max-height: 100%;
      background: var(--accent-color, #ed1a59);
      color: var(--primary-color, #212121);
      font-size: 2.75em;
      align-items: center;
      justify-content: center;
      border-radius: 0 0 15px 15px;
      transition: max-height 1s ease, font-size .7s ease-in-out .3s;
    }
  </style>
  <slot></slot>
`,window.customElements.define("mm-toolbar",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(e,"mm-toolbar"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(e.content.cloneNode(!0))}});const t=document.createElement("template");t.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    .play {
      color: var(--accent-color, #ed1a59);
      font-size: 2.5em;
      padding: 1em;
      cursor: pointer;
      border: 1px var(--accent-color, #ed1a59) solid;
      border-radius: 15px;
      transition: all .5s ease;
    }

    .hide { 
      opacity: 0;
    }

    .play:hover {
      color: var(--primary-color, #212121);
      background-color: var(--accent-color, #ed1a59);
    }

  </style>
  <span id="playButton" class="play">Play</span>
`,window.customElements.define("mm-play",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(t,"mm-play"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(t.content.cloneNode(!0)),this.play=a.querySelector("#playButton")}setPlayListener(a){this.play.addEventListener("click",a)}hide(){this.play.classList.add("hide")}});const n=document.createElement("template");n.innerHTML=w`
  <style>
    :host {
      background: #343434;
      border-radius: 50%;
      transform: background;
    }
  </style>
`,window.customElements.define("mm-circle",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(n,"mm-circle"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(n.content.cloneNode(!0))}size(a,b,c){const d=`${a>b?b-c:a-c}px`;this.style.width=d,this.style.height=d}color(a){this.style.background=a}});var o=function(){function a(a,b){var c=-1;return a.some(function(a,d){return a[0]===b&&(c=d,!0)}),c}return"undefined"==typeof Map?function(){function b(){this.__entries__=[]}var c={size:{configurable:!0}};return c.size.get=function(){return this.__entries__.length},b.prototype.get=function(b){var c=a(this.__entries__,b),d=this.__entries__[c];return d&&d[1]},b.prototype.set=function(b,c){var d=a(this.__entries__,b);~d?this.__entries__[d][1]=c:this.__entries__.push([b,c])},b.prototype.delete=function(b){var c=this.__entries__,d=a(c,b);~d&&c.splice(d,1)},b.prototype.has=function(b){return!!~a(this.__entries__,b)},b.prototype.clear=function(){this.__entries__.splice(0)},b.prototype.forEach=function(a,b){void 0===b&&(b=null);for(var c,d=0,e=this.__entries__;d<e.length;d+=1)c=e[d],a.call(b,c[1],c[0])},Object.defineProperties(b.prototype,c),b}():Map}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),s="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(a){return setTimeout(function(){return a(Date.now())},1e3/60)},a=["top","right","bottom","left","width","height","size","weight"],l="undefined"!=typeof MutationObserver,d=function(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(a,b){function c(){f&&(f=!1,a()),g&&e()}function d(){s(c)}function e(){var a=Date.now();if(f){if(a-h<2)return;g=!0}else f=!0,g=!1,setTimeout(d,b);h=a}var f=!1,g=!1,h=0;return e}(this.refresh.bind(this),20)};d.prototype.addObserver=function(a){~this.observers_.indexOf(a)||this.observers_.push(a),this.connected_||this.connect_()},d.prototype.removeObserver=function(a){var b=this.observers_,c=b.indexOf(a);~c&&b.splice(c,1),!b.length&&this.connected_&&this.disconnect_()},d.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},d.prototype.updateObservers_=function(){var a=this.observers_.filter(function(a){return a.gatherActive(),a.hasActive()});return a.forEach(function(a){return a.broadcastActive()}),0<a.length},d.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),l?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},d.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},d.prototype.onTransitionEnd_=function(b){var c=b.propertyName;void 0===c&&(c=""),a.some(function(a){return!!~c.indexOf(a)})&&this.refresh()},d.getInstance=function(){return this.instance_||(this.instance_=new d),this.instance_},d.instance_=null;var h=function(a,b){for(var c,d=0,e=Object.keys(b);d<e.length;d+=1)c=e[d],Object.defineProperty(a,c,{value:b[c],enumerable:!1,writable:!1,configurable:!0});return a},m=function(a){return a&&a.ownerDocument&&a.ownerDocument.defaultView||i},u=q(0,0,0,0),p="undefined"==typeof SVGGraphicsElement?function(a){return a instanceof m(a).SVGElement&&"function"==typeof a.getBBox}:function(a){return a instanceof m(a).SVGGraphicsElement},v=function(a){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=q(0,0,0,0),this.target=a};v.prototype.isActive=function(){var a=b(this.target);return this.contentRect_=a,a.width!==this.broadcastWidth||a.height!==this.broadcastHeight},v.prototype.broadcastRect=function(){var a=this.contentRect_;return this.broadcastWidth=a.width,this.broadcastHeight=a.height,a};var g=function(b,d){var f,g,j,k,m,n,a,c=(g=(f=d).x,j=f.y,k=f.width,m=f.height,n="undefined"==typeof DOMRectReadOnly?Object:DOMRectReadOnly,a=Object.create(n.prototype),h(a,{x:g,y:j,width:k,height:m,top:j,right:g+k,bottom:m+j,left:g}),a);h(this,{target:b,contentRect:c})},x=function(a,b,c){if(this.activeObservations_=[],this.observations_=new o,"function"!=typeof a)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=a,this.controller_=b,this.callbackCtx_=c};x.prototype.observe=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var b=this.observations_;b.has(a)||(b.set(a,new v(a)),this.controller_.addObserver(this),this.controller_.refresh())}},x.prototype.unobserve=function(a){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(a instanceof m(a).Element))throw new TypeError("parameter 1 is not of type \"Element\".");var b=this.observations_;b.has(a)&&(b.delete(a),b.size||this.controller_.removeObserver(this))}},x.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},x.prototype.gatherActive=function(){var a=this;this.clearActive(),this.observations_.forEach(function(b){b.isActive()&&a.activeObservations_.push(b)})},x.prototype.broadcastActive=function(){if(this.hasActive()){var a=this.callbackCtx_,b=this.activeObservations_.map(function(a){return new g(a.target,a.broadcastRect())});this.callback_.call(a,b,a),this.clearActive()}},x.prototype.clearActive=function(){this.activeObservations_.splice(0)},x.prototype.hasActive=function(){return 0<this.activeObservations_.length};var y="undefined"==typeof WeakMap?new o:new WeakMap,z=function(a){if(!(this instanceof z))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var b=d.getInstance(),c=new x(a,b,this);y.set(this,c)};["observe","unobserve","disconnect"].forEach(function(a){z.prototype[a]=function(){return(b=y.get(this))[a].apply(b,arguments);var b}});var B=void 0===i.ResizeObserver?z:i.ResizeObserver;const k=document.createElement("template");k.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
    }

    .container {
      display: flex;
      align-items: center;
      justify-content: center;
      flex: 1;
      margin: 2px;
      transition: all 1s ease-in-out;
    }

    .keys {
      display: flex;
      flex-direction: column;
    }

    .keys-row {
      display: flex;
      align-items: center;
      width: 100%;
    }

    .key {
      margin: 2px;
    }

  </style>
  <div class="container">
    <mm-circle></mm-circle>
  </div>
  <div class="container">
    <mm-circle></mm-circle>
  </div>
  <div class="container">
    <mm-circle></mm-circle>
  </div>
  <div class="container">
    <mm-circle></mm-circle>
  </div>
  <div class="container keys">
    <div class="keys-row">
      <mm-circle class="key"></mm-circle>
      <mm-circle class="key"></mm-circle>
    </div>
    <div class="keys-row">
      <mm-circle class="key"></mm-circle>
      <mm-circle class="key"></mm-circle>
    </div>
  </div>
`,window.customElements.define("mm-board-row",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(k,"mm-board-row"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(k.content.cloneNode(!0));const b=a.querySelectorAll(".container");this.circles=a.querySelectorAll("mm-circle:not(.key)"),this.keys=a.querySelectorAll("mm-circle.key");const c=new B((a)=>{for(const b of a){const{width:a,height:c}=b.contentRect;b.target.querySelectorAll("mm-circle").forEach((b)=>{let d=!1;b.classList.contains("key")&&(d=!0),b.size(d?a/2:a,d?c/2:c,5)})}});b.forEach((a)=>c.observe(a))}});const D=document.createElement("template");D.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex-direction: column;
      flex: 1;
      align-items: center;
      justify-content: center;
    }

    mm-board-row {
      display: flex;
      flex: 1;
      width: 100%;
      max-width: 600px;
    }
  </style>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
  <mm-board-row></mm-board-row>
`,window.customElements.define("mm-board",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(D,"mm-board"),ShadyCSS.styleElement(this)),this.attachShadow({mode:"open"}).appendChild(D.content.cloneNode(!0))}});const E=document.createElement("template");E.innerHTML=w`
  <style>
    :host {
      display: -webkit-box;
      display: -moz-box;
      display: -ms-flexbox;
      display: -webkit-flex;
      display: flex;
      flex: 1;
    }

    mm-toolbar.toolbar {
      max-height: 64px;
      font-size: 1.75em;
    }
    
  </style>
  <mm-toolbar class="toolbar">Mastermind</mm-toolbar>
  <!-- <mm-play></mm-play> -->
  <mm-board></mm-board>
`,window.customElements.define("mm-app",class extends HTMLElement{constructor(){super(),"undefined"!=typeof ShadyCSS&&(ShadyCSS.prepareTemplate(E,"mm-app"),ShadyCSS.styleElement(this));let a=this.attachShadow({mode:"open"});a.appendChild(E.content.cloneNode(!0)),this.toolbar=a.querySelector("mm-toolbar")}});const C=new class{constructor({solution:a,tries:b=12}){this.solution=a,this.tries=b,this.calc=this.calc,this.try=this.try}try({guess:a=[]}){return Object.assign(this.guess({guess:a}),{tries:--this.tries})}guess({guess:a=[]}){if(a.length!==this.solution.length)return;const b={hits:0,pseudoHits:0},c=this.solution.slice(),d=Array(this.solution.length).fill(0);return a.forEach((a,e)=>{a===this.solution[e]?(b.hits+=1,c[e]=-1):d[a]++}),d.forEach((a,c)=>{0<a&&this.solution.includes(c)&&b.pseudoHits++}),b}}({solution:[3,2,2,0]});console.log(C.try({guess:[2,1,1,0]}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
